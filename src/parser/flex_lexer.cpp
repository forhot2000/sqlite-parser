#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 151
#define YY_END_OF_BUFFER 152
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1159] =
    {   0,
        0,    0,    0,    0,    2,    2,  152,  150,    4,    4,
      150,  150,  143,  150,  143,  143,  146,  143,  143,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  143,  151,    2,    2,    3,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    4,  138,    0,    0,  149,    1,  146,  145,
      144,  140,  139,  141,  148,  148,  148,  148,  148,  148,

      148,  128,  148,  148,  148,  148,  148,  129,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  130,  148,  148,  131,  132,  148,  148,  148,  148,
      148,  148,  148,  133,  148,  134,  135,  136,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  137,  148,  148,  148,  148,  148,  148,  148,  148,
      142,    2,    2,    2,    2,    2,    2,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,  147,  144,  148,  148,  117,  148,  118,  148,  148,
      119,  120,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  121,  148,  148,

      148,  148,  148,  148,  122,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  123,  148,  148,  124,
      148,  148,  148,  148,  148,  148,  125,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  126,  148,  148,
      127,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,   92,  148,  148,   93,   94,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,   95,

      148,  148,  148,   96,   97,   98,  148,  148,  148,  148,
      148,   99,  148,  148,  100,  101,  102,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  103,  148,  104,
      105,  106,  148,  107,  148,  148,  148,  108,  148,  148,
      148,  109,  148,  148,  148,  148,  110,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      111,  112,  113,  148,  148,  148,  148,  148,  148,  148,
      148,  114,  148,  115,  148,  116,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   71,  148,   72,   73,  148,  148,  148,  148,   74,
      148,  148,  148,   75,  148,  148,  148,  148,  148,  148,

       76,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,   77,  148,   78,  148,  148,  148,
       79,  148,   80,  148,  148,  148,  148,  148,   81,   82,
      148,  148,  148,   83,   84,  148,  148,   85,   86,  148,
      148,  148,  148,  148,  148,  148,  148,   87,  148,  148,
      148,   88,  148,  148,  148,   89,  148,  148,   90,  148,
      148,  148,   91,  148,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,   46,  148,   47,
      148,   48,  148,  148,  148,  148,   49,   50,  148,  148,
       51,  148,  148,  148,  148,   52,   53,  148,   54,   55,
       56,  148,   57,  148,  148,   58,   59,  148,  148,  148,
       60,  148,  148,  148,   61,  148,  148,   62,   63,  148,
      148,  148,   64,  148,  148,   65,  148,  148,  148,  148,

       66,  148,  148,  148,   67,   68,   69,   70,  148,  148,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   26,  148,   27,   28,   29,   30,  148,
      148,  148,  148,   31,  148,  148,  148,  148,   32,   33,
      148,   34,  148,   35,   36,  148,   37,   38,   39,  148,

      148,   40,   41,   42,  148,  148,  148,  148,  148,   43,
       44,   45,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,  148,   20,  148,  148,   21,  148,   22,   23,  148,
      148,  148,  148,  148,  148,   24,   25,  148,  148,  148,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,  148,
      148,  148,  148,  148,   13,   14,   15,   16,   17,  148,

       18,   19,  148,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,  148,   10,  148,
      148,   11,   12,  148,    2,    2,    2,    2,    2,    2,
        2,  148,  148,  148,    9,    2,    2,    2,    2,  148,
        7,    8,    2,    2,    2,    6,  148,    2,    2,  148,
        2,  148,    2,  148,    2,    5,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static const flex_int16_t yy_base[1166] =
    {   0,
        0,    0,    0,    0,   67,    0,  486, 6508,  133,  135,
      466,    0, 6508,  463,  131,  428,  133,  132,  422,  131,
      134,  166,  184,  191,  206,  124,  126,  233,  123,  136,
      226,  143,  235,  243,  178,  127,  277,  270,  288,  271,
      197,  147,    0,  282, 6508,    0,  168,  254,  333,  337,
        0,  332,  200,  328,  263,  270,  323,  346,  399,  451,
      503,  555,  607,  443,  459,  655,  495,  501,  553,  598,
      603,  706,  652,  543,  704,  751,  796,  836,  758,  884,
      697,  267,  291, 6508,  326,  321, 6508, 6508,  298,  256,
      225, 6508, 6508, 6508,    0,  138,  208,  234,  252,  395,

      296,  298,  284,  386,  402,  395,  397,    0,  397,  412,
      511,  487,  405,  406,  738,  408,  441,  452,  467,  459,
      505,  511,  611,  508,  517,  528,  539,  551,  551,  556,
      553,    0,  568,  599,  798,  602,  608,  607,  627,  652,
      639,  637,  651,  652,  663,  671,    0,  677,  690,  715,
      752,  723,  726,  929,  757,  769,  746,  786,  770,  796,
      784,    0,  812,  801,  818,  817,  848,  838,  830,  826,
     6508,    0,  318,    0,  221,  215,    0,    0,  314,  207,
      203,    0,    0,    0,  853,  885,  935,  974,  941,  989,
     1041,  995, 1018, 1039, 1088, 1072, 1095, 1100, 1126, 1138,

     1186, 1144, 1034, 1161, 1233, 1210, 1244, 1192, 1258, 1287,
     1292, 1302, 1347,  981, 1300, 1342, 1359, 1087, 1388, 1396,
     1397, 1239, 1406, 1432, 1473, 1455, 1407, 1454, 1496, 1512,
     1508, 1527, 1551, 1553, 1556, 1598, 1458, 1575, 1599, 1621,
     1624, 1650, 1647, 1693, 1688, 1732, 1734, 1734, 1749, 1781,
     1784, 1792, 1803, 1793, 1834, 1831, 1839, 1863, 1880, 1881,
        0, 6508,  194,  843,  855,    0,  863,    0,  871,  868,
        0,    0,  895,  889,  891,  906,  899,  923,  932, 1141,
      951,  964,  951,  989,  968,  973,  984, 1048, 1057, 1056,
     1071, 1091, 1093, 1126, 1141, 1152, 1157,    0, 1165, 1180,

     1186, 1198, 1201, 1213, 1228, 1246, 1252, 1265, 1247, 1292,
     1287, 1308, 1312, 1299, 1322, 1332, 1350, 1336, 1347,    0,
     1349, 1366, 1372, 1400, 1414, 1404, 1414, 1417, 1432, 1448,
     1449, 1445, 1466, 1470, 1489, 1489, 1501, 1497, 1526, 1532,
     1539, 1556, 1565, 1564, 1562, 1577, 1578,    0, 1611, 1615,
        0, 1609, 1622, 1624, 1631, 1644, 1654, 1659, 1661, 1665,
     1660, 1663, 1664, 1672, 1731, 1690,    0,  191, 1889, 1906,
     1911, 1928, 1936, 1952, 1947, 1937, 1978, 1988, 1990, 2014,
     2006, 2025, 2036, 2051, 2068, 2067, 2093, 2103, 2101, 2121,
     2147, 2149, 2152, 2195, 2194, 2198, 2239, 2213, 2242, 2243,

     2254, 2271, 2289, 2290, 2297, 2308, 2325, 2344, 2349, 2354,
     2385, 2366, 2397, 2401, 2420, 2432, 2429, 2448, 2451, 2474,
     2483, 2496, 2486, 2509, 2511, 2533, 2528, 2552, 2563, 2574,
     2575, 2578, 2600, 2619, 2624, 2641, 2650, 2665, 2666, 2667,
     2695, 2704, 2712, 2714, 2749, 2723, 2758, 2767, 2766, 2784,
     2803, 2812, 2813, 2831, 2849, 2814, 2850, 2861, 2879, 2887,
     2891, 2903, 2926, 2935, 2944, 2945, 2970, 2973, 2974, 2452,
     2989, 1695, 1705, 1712, 1715, 1734, 1758, 1782, 1780, 1785,
     1798,    0, 1839, 1848,    0,    0, 1842, 1858, 1847, 1864,
     1879, 1874, 1882, 1884, 1930, 1936, 1922, 1930, 1931,    0,

     1966, 1965, 1964,    0,    0,    0, 1969, 1976, 1977, 1980,
     2009,    0, 1993, 2026,    0,    0,    0, 2031, 2037, 2035,
     2054, 2035, 2055, 2081, 2083, 2103, 2168,    0, 2105,    0,
        0,    0, 2098,    0, 2119, 2124, 2139,    0, 2157, 2160,
     2163,    0, 2178, 2208, 2187, 2215,    0, 2232, 2236, 2237,
     2264, 2282, 2281, 2295, 2286, 2288, 2311, 2299, 2313, 2340,
     2331,    0,    0, 2343, 2359, 2362, 2360, 2371, 2405, 2395,
     2414,    0, 2421,    0, 2450, 2490, 2992, 3011, 3027, 3028,
     3052, 3053, 3071, 3075, 3076, 3094, 3099, 3118, 3130, 3129,
     3140, 3166, 3177, 3176, 3165, 3212, 3214, 3223, 3222, 3224,

     3260, 3270, 3269, 3268, 3292, 3307, 3316, 3317, 3318, 3333,
     3335, 3359, 3361, 3363, 3378, 3387, 3404, 3413, 3415, 3423,
     3432, 3441, 3458, 3467, 3469, 3486, 3495, 3470, 3512, 3517,
     3534, 3549, 3560, 3572, 3571, 3588, 3590, 3607, 3616, 3626,
     3635, 3654, 3657, 3676, 3673, 3695, 3685, 3711, 3733, 3714,
     3743, 3755, 3765, 3781, 3791, 3800, 3819, 3816, 3857, 3835,
     3854, 3866, 3883, 3895, 3905, 3913, 3914, 3924, 3942, 3959,
     3960, 3943, 3978, 3997, 3996, 4006, 4007, 4025, 4042, 4051,
     4050,    0, 2510,    0,    0, 2514, 2538, 2545, 2557,    0,
     2569, 2574, 2594,    0, 2587, 2601, 2600, 2615, 2613, 2656,

        0, 2649, 2677, 2688, 2700, 2717, 2716, 2715, 2730, 2766,
     2752, 2761, 2767, 2782,    0, 2801,    0, 2834, 2840, 2851,
     2866, 2874,    0, 2864, 2912, 2913, 2906, 2945,    0,    0,
     2971, 2990, 2987,    0,    0, 3010, 2997,    0,    0, 3014,
     3035, 3032, 3044, 3040, 3093, 3106, 3104,    0, 3127, 3129,
     3137,    0, 3145, 3163, 3162,    0, 3182, 3205,    0, 3205,
     3203, 3246,    0, 3254, 4054, 4086, 4095, 4096, 4098, 4127,
     4139, 4149, 4157, 4181, 4193, 4203, 4192, 4211, 4229, 4241,
     4239, 4265, 4257, 4276, 4288, 4304, 4287, 4319, 4336, 4335,
     4345, 4364, 4382, 4373, 4392, 4410, 4347, 4401, 4427, 4436,

     4451, 4446, 4468, 4483, 4492, 4487, 4509, 4531, 4528, 4546,
     4554, 4569, 4570, 4593, 4592, 4617, 4608, 4616, 4639, 4640,
     4662, 4663, 4665, 4691, 4688, 4710, 4713, 4732, 4735, 4736,
     4751, 4754, 4777, 4780, 4782, 4799, 4821, 4823, 4831, 4847,
     4866, 4869, 4878, 4894, 4916, 4913, 4917,    0, 3275,    0,
     3279,    0, 3283, 3316, 3326, 3335,    0,    0, 3352, 3372,
        0, 3354, 3364, 3365, 3437,    0,    0, 3389,    0,    0,
        0, 3400,    0, 3413, 3414,    0,    0, 3436, 3476, 3470,
        0, 3487, 3478, 3519,    0, 3515, 3520,    0,    0, 3509,
     3532, 3530,    0, 3521, 3568,    0, 3573, 3579, 3583, 3586,

        0, 3611, 3618, 3610,    0,    0,    0,    0, 3628, 3621,
     4925, 4961, 4942, 4960, 4964, 4972, 4996, 5011, 5014, 5015,
     5019, 5050, 5060, 5061, 5062, 5065, 5097, 5109, 5112, 5113,
     5144, 5148, 5156, 5159, 5160, 5185, 5195, 5203, 5204, 5207,
     5226, 5248, 5256, 5257, 5267, 5272, 5302, 5303, 5311, 5313,
     5321, 5339, 5356, 5357, 5374, 5375, 5398, 5393, 5403, 5421,
     5429, 5439, 5447, 5451, 5470, 5475, 5486, 5494, 5498, 5516,
     5517, 5533, 5535,    0, 3627,    0,    0,    0,    0, 3627,
     3674,  120, 3690,    0, 3697, 3701, 3709, 3711,    0,    0,
     3715,    0, 3731,    0,    0, 3742,    0,    0,    0, 3731,

     3752,    0,    0,    0, 3745, 3767, 3773, 3778, 3786,    0,
        0,    0, 5545, 5561, 5564, 5580, 5583, 5592, 5609, 5608,
     5627, 5637, 5646, 5656, 5674, 5678, 5693, 5697, 5715, 5719,
     5734, 5744, 5743, 5745, 5760, 5762, 5786, 5788, 5790, 5791,
     5814, 5816, 5832, 5833, 5855, 5851, 5870, 5881, 5880, 5896,
     5905, 3807,    0, 3799, 3841,    0, 3825,    0,    0, 3845,
     3849, 3842, 3856, 3874, 3886,    0,    0, 3885, 3882, 3903,
     5922, 5927, 5931, 5946, 5970, 5972, 5982, 5987, 6011, 6019,
     6023, 6041, 6060, 6065, 6064, 6069, 6095, 6107, 6110, 3902,
     3900, 3952, 3956, 3965,    0,    0,    0,    0,    0, 4001,

        0,    0, 4020, 6111, 6119, 6155, 6154, 6164, 6165, 6173,
     6183, 6201, 6202, 6211, 6212, 6220, 6237, 4043,    0, 4032,
     4051,    0,    0, 4055, 6255, 6256, 6273, 6265, 6274, 6291,
     6309, 4062, 4077, 4083,    0, 6310, 6326, 6327, 6338, 4086,
        0, 4091, 6357, 6362, 6380,    0, 4093, 6379, 6381, 4116,
     6405, 4105, 6416, 4103, 6404,    0, 6427, 6508, 6483, 6487,
     6491,  149, 6495, 6499, 6503
    } ;

static const flex_int16_t yy_def[1166] =
    {   0,
     1158,    1, 1159, 1159, 1158,    5, 1158, 1158, 1158, 1158,
     1158, 1160, 1158, 1161, 1158, 1158, 1158, 1158, 1158, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1158, 1158, 1163, 1163, 1158, 1163, 1164,
     1163, 1165, 1163, 1163, 1163, 1163, 1163, 1158,   58,   59,
       59,   59,   60,   59,   59,   62,   59,   59,   59,   59,
       60,   60,   72,   72,   61,   61,   61,   72,   61,   61,
       72, 1163, 1158, 1158, 1160, 1161, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1162, 1162, 1162, 1162, 1162, 1162,

     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1158, 1163, 1163, 1163, 1164, 1165, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163,   72,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   72,   59,   59,   59,   59,   59,

       59,   59,   72,   72,   72,  205,   72,   59,   59,  205,
      205,  205,  205,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  205,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
     1163, 1158, 1158, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,

     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1163, 1163,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  205,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  213,   59,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,   59,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,   72,
      213, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,

     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,

     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,

     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,

     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,

     1162, 1162, 1162,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213, 1162, 1162, 1162,
     1162, 1162, 1162, 1162,  213,  213,  213,  213,  213,  213,
      213, 1162, 1162, 1162, 1162,  213,  213,  213,  213, 1162,
     1162, 1162,  213,  213,  213, 1162, 1162,  213,  213, 1162,
      213, 1162,  213, 1162,  213, 1162,  213,    0, 1158, 1158,
     1158, 1158, 1158, 1158, 1158
    } ;

static const flex_int16_t yy_nxt[6576] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   13,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   43,   43,    8,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   43,   43,   44,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   51,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,

       78,   79,   80,   81,   81,   81,   46,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   81,   81,   82,   83,   83,   83,   83,   88,  131,
       89,   91,   89,   92,   93,   96,   97,   98,  129,   99,
      137,  105,   95,  138,  130,  100,  142,  101,  106, 1055,
      152,  107,  102,  103,  104,  264,  131,  169,  170,  173,
       83,  108,   96,   97,   98,  129,   99,  137,  105,  109,
      138,  130,  100,  142,  101,  106,  110,  152,  107,  102,
      103,  104,  264,  111,  169,  170,  112,  114,  108,  113,

      368,  115,  150,  263,  119,  116,  109,  178,  151,  179,
      167,  117,  368,  110,  118,  120,  180,  121,  168,  124,
      111,  177,  122,  112,  114,  367,  113,  123,  115,  150,
      125,  119,  116,  126,  263,  151,  127,  167,  117,  128,
      265,  118,  120,  139,  121,  168,  124,  140,  143,  122,
      266,  132,  133,  141,  123,   83,   83,  125,  134,  135,
      126,  146,  144,  127,  136,   90,  128,  265,  145,  147,
      139,  181,  179,  148,  140,  143,  149,  266,  132,  133,
      141,  182,  183,  157,  267,  134,  135,  158,  146,  144,
      153,  136,   83,   83,  154,  145,  147,  164,  155,  165,

      148,  159,  166,  149,  156,  160,   91,   89,  161,  270,
      157,  267,  271,  272,  158,  162,  273,  153,  163,  173,
       83,  154,  181,  179,  164,  155,  165,   87,  159,  166,
      262,  156,  160,  261,  184,  161,  270,  180,  177,  271,
      272,  172,  162,  273,  174,  163,  172,  172,  171,  172,
      172,  172,  172,  172,  172,  185,  172,  172,  172,  185,
      186,  187,  188,  185,  189,  185,  185,  185,  185,  185,
      190,  185,  191,  185,  185,  185,  185,  192,  193,  194,
      185,  185,  185,  185,  185,  185,  185,  186,  187,  188,
      185,  189,  185,  185,  185,  185,  185,  190,  185,  191,

      185,  185,  185,  185,  192,  193,  194,  185,  185,  185,
      185,  185,  172,  185,  185,  185,  195,  185,  274,  268,
      275,  276,  278,  196,  279,  185,  197,  269,  280,  281,
      185,  185,  185,   94,  277,  287,  198,   90,  288,  293,
      185,  185,  185,  195,  185,  274,  268,  275,  276,  278,
      196,  279,  185,  197,  269,  280,  281,  185,  185,  185,
      185,  277,  287,  198,  199,  288,  293,  219,  185,   87,
      185,  200,  221,  220,  294,  185,  185,   84,  201,  295,
      185,  202,  296,  185,  203, 1158,  185,  185,  185, 1158,
      297,  199, 1158, 1158,  219,  185,  185,  185,  200,  221,

      220,  294,  185,  185,  285,  201,  295,  185,  202,  296,
      185,  203,  185,  185,  286,  185,  204,  297,  228,  185,
      205,  298,  227,  185,  206,  185,  299,  185,  185,  303,
      207,  285,  185,  208, 1158,  282,  283,  284,  185,  185,
      185,  286, 1158,  204,  304,  228,  185,  205,  298,  227,
     1158,  206,  185,  299,  185,  185,  303,  207,  305,  185,
      208,  185,  282,  283,  284,  185,  306,  185,  209,  185,
      229,  304,  185,  185,  230,  307,  242,  185,  308,  210,
      231,  211,  185,  309, 1158,  305,  212,  310,  185, 1158,
      185,  213,  185,  306,  311,  209,  185,  229, 1158,  185,

      185,  230,  307,  242,  185,  308,  210,  231,  211,  185,
      309,  232, 1158,  212,  310,  185,  233,  185,  213,  185,
      214,  311,  185,  185,  312,  185,  300,  185,  318,  319,
      234,  215,  301,  185,  216,  185,  235,  217,  232,  302,
      218, 1158,  185,  233,  320,  321, 1158,  214, 1158,  185,
      185,  312,  185,  300,  185,  318,  319,  234,  215,  301,
      185,  216,  185,  235,  217,  324,  302,  218,  185,  325,
      185,  320,  321,  222,  223,  322,  240,  323,  185,  185,
      224,  225,  241,  326,  327,  185,  226,  328, 1158,  329,
     1158,  185,  324,  330, 1158,  185,  325,  185, 1158, 1158,

      222,  223,  322,  240,  323,  185,  185,  224,  225,  241,
      326,  327,  185,  226,  328,  185,  329,  243,  185,  185,
      330,  244,  331,  185,  236,  245,  185,  185,  332, 1158,
      185,  246,  237,  185,  185, 1158,  238, 1158, 1158,  239,
      335, 1158,  185, 1158,  243, 1158,  185,  336,  244,  331,
      185,  236,  245,  185,  185,  332,  289,  185,  246,  237,
      185,  185,  290,  238,  247,  333,  239,  335,  248,  291,
      292,  257,  185,  334,  336,  185,  346, 1158,  185,  258,
      349,  185, 1158,  289,  352,  185, 1158, 1158,  185,  290,
     1158,  247,  333,  347, 1158,  248,  291,  292,  257,  185,

      334,  355,  185,  346,  348,  185,  258,  349,  185,  249,
      350,  352,  185,  250,  313,  185,  251,  185,  351,  314,
      347,  353,  358,  252,  315,  356,  253, 1158,  355,  316,
      317,  348,  354,  357,  359, 1158,  249,  350,  360, 1158,
      250,  313, 1158,  251,  185,  351,  314,  365,  353,  358,
      252,  315,  356,  253,  185,  363,  316,  317,  366,  354,
      357,  359,  254,  361,  255,  360,  185,  256,  364,  185,
     1158,  185,  362,  472,  365, 1158,  473, 1158, 1158,  185,
      474,  185,  363,  185, 1158,  366,  185, 1158,  475,  254,
      361,  255,  476,  185,  256,  364,  185,  185,  185,  362,

      472,  185,  185,  473,  259,  260,  185,  474,  477,  185,
      185,  185,  369,  185,  185,  475,  478, 1158,  479,  476,
     1158, 1158,  185, 1158,  185, 1158, 1158,  480,  185,  185,
     1158,  259,  260, 1158,  481,  477,  185,  482,  185,  369,
     1158,  185,  337,  478,  338,  479, 1158,  339,  340,  185,
      341, 1158,  185,  342,  480,  343,  483,  344,  185,  185,
      345,  481,  185, 1158,  482,  185,  487,  370,  185,  337,
     1158,  338,  185,  372,  339,  340,  490,  341,  185,  185,
      342,  493,  343,  483,  344,  185,  185,  345,  488,  185,
      371,  185,  185,  487,  370,  185,  185,  489,  185,  185,

      372,  185,  408,  490,  494,  185,  185,  491,  493,  185,
      377,  185,  185,  373,  495,  488,  185,  371,  185,  185,
      492,  374,  185,  185,  489,  185,  185, 1158,  185,  408,
     1158,  494,  185,  185,  491,  185,  185,  377,  185,  185,
      373,  495,  185,  185, 1158,  185,  185,  492,  374,  185,
      378, 1158,  185,  185,  375,  185,  185,  376,  185,  185,
      185,  496,  185,  185,  392,  185,  185,  185,  185,  185,
      497,  379,  185,  499,  498, 1158,  185,  378,  185,  185,
     1158,  375,  185,  185,  376,  185,  500,  185,  496,  185,
      185,  392,  185,  185,  185,  185,  185,  497,  379,  383,

      499,  498,  185,  185,  501,  185,  380,  381,  185,  185,
     1158,  412,  185,  500,  185,  185,  185,  185,  185,  185,
      382,  185,  384,  185,  185,  502,  383,  185, 1158,  185,
     1158,  501,  185,  380,  381,  185,  185,  185,  412,  185,
      503,  185,  185,  185,  185,  185,  185,  382,  185,  384,
      185,  185,  502,  185,  185,  386,  484,  385,  485,  185,
     1158,  390,  185,  185,  185,  185, 1158,  503,  185,  504,
      185,  391,  505,  486,  506,  185, 1158,  185,  507,  185,
      185,  185,  386,  484,  385,  485, 1158,  185,  390,  185,
      185,  185,  185,  393,  185,  185,  504,  508,  391,  505,

      486,  506,  185,  185,  509,  507,  185, 1158,  185,  185,
      387,  388,  389,  185,  185, 1158,  185,  510,  185,  400,
      393,  185,  511,  185,  508,  512,  513, 1158,  185,  185,
      185,  509, 1158, 1158,  185, 1158,  185,  387,  388,  389,
      185,  398,  185,  185,  510,  514,  400, 1158, 1158,  511,
      185,  394,  512,  513,  185,  185,  185,  395, 1158,  185,
      185,  185,  185,  185,  396,  397,  185,  185,  398,  185,
      185,  515,  514,  401,  185,  185,  516,  399,  394,  517,
      518,  185,  185, 1158,  395,  185,  185,  185, 1158,  185,
      185,  396,  397,  185,  185,  185, 1158,  185,  515, 1158,

      401,  185,  185,  516,  399,  185,  517,  518,  403,  185,
      185,  185,  185,  519,  520,  185,  185,  404,  402,  185,
      185,  185,  185,  185,  185,  521,  185,  409,  185,  522,
     1158,  523,  185,  185,  185,  403, 1158,  185,  185,  524,
      519,  520,  185,  185,  404,  402,  185,  185,  185,  525,
      185,  185,  521,  185,  409,  185,  522,  185,  523, 1158,
      185,  185,  405,  185,  526,  185,  524,  527,  406,  529,
      185,  185,  410,  530,  185,  407,  525,  528,  185,  185,
      185,  531, 1158,  532,  185, 1158,  411,  185, 1158,  405,
      185,  526,  185,  533,  527,  406,  529,  185,  185,  410,

      530,  185,  407,  185,  528,  185,  185,  185,  531,  185,
      532,  185,  185,  411,  185,  413,  185,  185,  185,  534,
      533,  185,  185,  414,  185,  185, 1158,  185,  424,  535,
      185,  415,  416, 1158,  185,  185,  185,  536,  185,  185,
      537,  538,  413,  185,  185,  185,  534,  185,  185,  185,
      414,  185,  185,  185,  185,  424,  535,  417,  415,  416,
      185,  185,  185,  539,  536,  540,  541,  537,  538,  185,
      185,  542, 1158,  185,  185,  185,  185, 1158, 1158,  185,
      185,  423,  185,  185,  417,  543,  185,  185,  185,  418,
      539,  425,  540,  541,  419,  544,  185,  185,  542,  420,

      185,  185,  185,  185,  421,  422,  185, 1158,  423,  185,
      185,  185,  543,  185,  426,  185,  418,  185,  425,  545,
      546,  419,  544,  185,  185,  547,  420,  185,  185,  185,
      548,  421,  422,  185,  429,  427,  185,  428,  185, 1158,
      185,  426,  185,  549,  185, 1158,  545,  546,  185,  550,
      185,  185,  547, 1158,  185,  185,  185,  548, 1158,  430,
      185,  429,  427,  185,  428,  551,  185,  185,  185,  185,
      549,  185,  185,  552,  185,  185,  550,  185,  553,  185,
      433,  185,  185,  431,  185,  432,  430, 1158,  554, 1158,
      185,  435,  551,  185,  555,  185,  185,  556,  185,  185,

      552,  185,  557,  185,  185,  553,  185,  433,  185, 1158,
      431,  185,  432,  185,  185,  554,  434,  185,  435,  185,
      185,  555, 1158,  185,  556, 1158,  185,  185,  558,  557,
      185,  436,  559,  560,  437, 1158,  185,  438, 1158,  185,
      185,  185,  185,  434, 1158,  439,  185,  185, 1158,  185,
      561, 1158,  185,  185,  185,  558,  562,  563,  436,  559,
      560,  437,  185,  185,  438,  185,  185,  440,  441,  185,
      564,  185,  439,  565,  568,  185,  185,  561,  185,  185,
     1158, 1158, 1158,  562,  563, 1158,  566, 1158,  567,  185,
     1158,  569,  185,  570,  440,  441,  571,  564,  185,  572,

      565,  568,  185,  185,  573,  185,  442,  451,  443,  185,
      576,  444,  445,  566,  446,  567,  185,  447,  569,  448,
      570,  449, 1158,  571,  450, 1158,  572,  682, 1158, 1158,
      185,  573,  683,  442,  451,  443,  185,  576,  444,  445,
     1158,  446,  684,  185,  447,  685,  448,  185,  449,  185,
     1158,  450,  185,  185,  682,  185,  452,  574,  455,  683,
      185,  575,  185,  457,  185,  185,  456,  453,  454,  684,
      185,  686,  685,  687,  185, 1158,  185,  185, 1158,  185,
      185, 1158,  185,  452,  574,  455, 1158,  185,  575,  185,
      457,  185,  185,  456,  453,  454,  185,  185,  686,  185,

      687,  460,  185,  688,  185,  185,  458,  185,  185,  185,
      689,  690,  185,  185,  463,  691,  461,  459,  185, 1158,
      185,  185, 1158,  185,  462, 1158,  185, 1158,  460,  185,
      688,  185,  185,  458,  185,  185,  185,  689,  690,  185,
      185,  463,  691,  461,  459,  185,  185,  185,  185,  185,
      464,  462,  465, 1158,  466,  185,  692, 1158,  185,  185,
      185,  693,  185,  467, 1158,  694, 1158,  185, 1158, 1158,
     1158,  695,  696,  185, 1158, 1158,  185,  464,  185,  465,
      468,  466,  185,  692,  185,  697,  185,  185,  693,  185,
      467,  185,  694,  469,  185,  185,  185,  470,  695,  696,

     1158,  185,  185,  698,  185,  185,  699,  468,  185,  185,
      185,  185,  697,  471,  700,  701, 1158,  185,  185,  577,
      469,  185,  185,  185,  470, 1158,  185,  578,  185,  185,
      698,  185,  185,  699,  185,  185,  185,  185, 1158,  185,
      471,  700,  701,  185,  185,  579,  577,  702,  185,  185,
      703,  185,  185,  185,  578,  704,  185,  185,  185,  185,
      705,  185,  185,  706,  185,  185,  185,  185,  185,  580,
      185,  581,  579,  185,  702,  185,  185,  703,  185,  185,
      185,  707,  704,  185,  185,  185,  708,  705,  709,  185,
      706,  185,  185,  185,  185,  185,  580,  710,  581,  185,

      185,  582,  185,  185,  711,  185,  185,  185,  707,  185,
      712,  185,  713,  708, 1158,  709,  185,  583,  185, 1158,
      185,  185,  714, 1158,  710,  715,  185,  585,  582,  185,
      185,  711,  185,  185,  185,  185,  185,  712,  185,  713,
      185,  584,  185,  185,  583,  185,  185,  716,  185,  714,
      587,  185,  715,  185,  585, 1158,  185,  185, 1158,  717,
      586,  185,  185,  718,  185,  719,  185,  185,  584,  185,
      720,  721,  185,  185,  716,  588,  722,  587,  185,  185,
      185, 1158,  592,  589,  185,  590,  717,  586,  185,  185,
      718,  185,  719,  185, 1158,  185,  185,  720,  721,  185,

      591, 1158,  588,  722, 1158, 1158,  185, 1158,  185,  592,
      589,  723,  590,  724,  185,  185,  185,  593,  185,  596,
      725,  185,  185,  185,  185,  185,  594,  591,  595,  728,
      729,  185,  597,  185,  598,  185,  185, 1158,  723,  730,
      724,  185,  185, 1158,  593,  185,  596,  725,  185,  185,
     1158,  185,  185,  594,  731,  595,  728,  729,  185,  597,
      185,  598,  185,  185,  185,  601,  730,  185,  185,  185,
      185, 1158,  732,  185,  733,  185,  185,  185,  599,  600,
      185,  731, 1158, 1158, 1158, 1158, 1158,  726, 1158,  185,
      734,  185,  601,  735,  185,  185, 1158,  185,  727,  732,

      185,  733,  185,  736,  185,  599,  600,  185,  602,  185,
      185,  604,  603,  605,  726,  185,  185,  734, 1158,  185,
      735,  737,  185,  185,  738,  727,  185, 1158,  185, 1158,
      736, 1158,  739, 1158,  185,  602,  185,  185,  604,  603,
      605,  185,  185,  185, 1158,  607,  185, 1158,  737,  185,
      185,  738,  606,  185,  185,  185,  608,  185,  185,  739,
      185,  185,  740,  185,  185, 1158,  741,  185,  185,  185,
      185,  609,  607,  742,  610,  185, 1158, 1158, 1158,  606,
      743,  185,  185,  608,  185,  185,  185,  185,  611,  740,
      185,  185,  185,  741,  185,  744,  185,  185,  609,  185,

      742,  610,  185,  612,  185,  185,  745,  743,  746,  185,
      185,  185, 1158,  185,  613,  611,  747,  185,  185,  185,
      748,  614,  744,  185,  185,  749,  185,  750,  751,  185,
      612,  185,  185,  745,  185,  746,  185,  185,  185,  615,
      185,  613, 1158,  747,  185,  185,  185,  748,  614,  616,
      185,  185,  749,  185,  750,  751,  185,  752,  753,  185,
     1158,  185,  618,  185,  185,  185,  615,  185,  617,  185,
      185,  619,  185,  185,  754,  185,  616,  185,  755, 1158,
      185,  185,  185, 1158,  752,  753,  185,  185,  756,  618,
      621,  185,  185,  757,  185,  617,  185,  185,  619,  185,

      185,  754,  185,  758,  185,  755,  185, 1158,  185,  185,
      620,  622,  185,  185,  185,  756,  185,  621,  185, 1158,
      757,  185,  185, 1158,  759,  185, 1158,  185,  760,  185,
      758,  761, 1158,  185,  623,  185, 1158,  620,  622,  185,
      185,  624, 1158,  185,  185,  185,  626,  185,  185,  185,
      185,  759,  185,  185,  762,  760,  185,  185,  761,  625,
      185,  623,  185,  185, 1158,  627,  185,  763,  624,  185,
      185,  185,  185,  626,  185,  185,  185,  185,  679,  185,
      185,  762,  680,  628,  185,  185,  625,  185, 1158,  185,
      185,  629,  627,  185,  763,  185,  185,  185,  185,  185,

      630,  185,  185,  185,  185,  679,  185,  185, 1158,  680,
      628,  185,  185,  632,  185,  631,  185,  764,  629,  634,
      185, 1158,  185,  633,  185,  185,  185,  630,  185,  185,
      185,  185,  185,  185,  185,  635,  848,  185,  185,  185,
      632,  185,  631,  185,  764,  637,  634,  185,  185,  185,
      633,  185,  849,  185,  185, 1158,  185,  185,  850,  185,
      185,  185,  635,  848,  185,  636,  185,  185, 1158, 1158,
      185,  851,  637,  638,  852,  185,  185, 1158,  185,  849,
      185,  185,  639,  185,  185,  850,  853,  854,  185,  640,
      185,  185,  636,  185,  185,  185,  185, 1158,  851,  185,

      638,  852,  185,  185,  642,  185,  185,  185,  641,  639,
      855,  185, 1158,  853,  854,  185,  640,  185,  185,  856,
      185,  185,  185,  185,  643, 1158,  185,  857,  185,  185,
      185,  642,  858,  185,  185,  641,  859,  855, 1158,  185,
      185,  645,  185,  860, 1158,  185,  856,  185,  185, 1158,
      644,  643,  185, 1158,  857,  185,  185, 1158,  646,  858,
     1158,  185,  185,  859, 1158,  185,  185,  185,  645,  185,
      860,  185,  185,  861,  185,  862,  647,  644,  185,  185,
      185,  185,  185,  185,  648,  646,  185,  185,  185,  185,
      863,  649,  185,  185,  185,  185,  185,  650,  185, 1158,

      861, 1158,  862,  647, 1158,  185, 1158,  185,  185,  185,
      185,  648,  864,  185,  185,  185,  185,  863,  649,  185,
      185,  185,  185,  185,  650,  185,  651,  185,  652,  185,
      865,  654,  185,  185,  866,  185,  867,  185,  185,  864,
      185,  868,  185,  185,  185,  653,  185,  869, 1158,  656,
      185,  185,  185,  651,  185,  652,  185,  865,  654,  185,
      185,  866,  185,  867,  185,  185,  655,  185,  868,  185,
      185,  185,  653,  185,  869,  657,  656,  185,  185,  185,
      658,  185,  185,  870,  871, 1158,  185,  185,  185, 1158,
      659,  185,  872,  655,  185,  185, 1158,  185,  873,  185,

      185, 1158,  657,  874,  185,  185,  185,  658,  185,  185,
      870,  871,  185,  185,  185,  185,  660,  659,  185,  872,
      875,  185,  185,  661,  185,  873,  185,  185,  185,  185,
      874,  185,  185,  185,  185,  185,  662, 1158, 1158,  185,
      185,  185,  185,  660, 1158,  185,  185,  875,  663, 1158,
      661,  185,  185,  876,  185,  185,  185,  877,  185,  185,
      185,  185,  185,  662,  185,  185,  664,  185,  185,  185,
      185,  185,  878,  185,  665,  663,  185,  185,  185,  185,
      876, 1158,  185,  879,  877, 1158,  185,  880, 1158,  666,
     1158,  185,  185,  664,  185, 1158,  881,  185,  185,  878,

      185,  665,  185,  185,  185,  185,  185,  185,  185,  185,
      879,  667,  185,  668,  880,  185,  666,  669,  185,  185,
     1158,  185,  670,  881,  185,  882, 1158,  185, 1158,  185,
      883,  185, 1158,  185,  185,  185, 1158,  884,  667,  185,
      668,  185,  185, 1158,  669,  185,  185,  185,  673,  670,
      185,  185,  882,  671,  185,  672,  185,  883,  185,  185,
      185, 1158, 1158,  185,  884,  185,  185, 1158,  185,  885,
      674, 1158,  185,  185,  185,  673, 1158,  185,  675, 1158,
      671,  185,  672,  185,  886,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  885,  674,  185,  185,

      185,  185,  185,  676,  185,  675,  678,  185,  677,  681,
      185,  886,  185,  185,  887,  185,  185,  185,  185,  888,
      185,  185,  185,  889,  765,  185,  185,  890,  185,  185,
      676,  185,  185,  678,  185,  677,  681,  185,  766,  185,
      185,  887,  185,  185,  185,  891,  888,  185,  185,  185,
      889,  765,  892,  185,  890,  185,  185,  767,  768,  185,
      893,  894, 1158, 1158, 1158,  766,  185,  185,  770,  185,
      185,  895,  891,  185,  185,  185,  185, 1158, 1158,  892,
      185,  185,  185,  185,  767,  768,  185,  893,  894,  769,
      185,  185,  771, 1158,  185,  770,  185,  185,  895,  185,

      185,  185,  773,  185,  185,  772, 1158,  185,  185,  185,
      896,  774, 1158,  185,  185,  185,  769,  185,  185,  771,
      185,  897,  185,  185,  185,  898,  185,  185, 1158,  773,
      185,  185,  772,  185, 1158,  775,  185,  896,  774,  185,
      899,  185,  185,  776,  185,  185,  185,  185,  897,  185,
      185,  185,  898, 1158,  185,  185,  900,  185,  185, 1158,
      185,  185,  775, 1158, 1158, 1158,  185,  899,  185,  901,
      776,  185,  185,  185, 1158,  902,  903,  185,  185,  904,
      185,  185,  185,  900,  185,  185,  780,  185,  185,  777,
      778,  185,  185,  185,  185,  185,  901,  185,  185,  905,

     1158,  779,  902,  903,  185,  185,  904,  185,  185, 1158,
     1158, 1158, 1158,  780,  185, 1158,  777,  778,  185,  185,
      185,  185,  906, 1158,  185,  185,  905,  185,  779,  185,
      907,  185,  185,  185,  908,  185,  781,  185,  185,  185,
      185,  785,  185,  185,  185,  185,  782, 1158, 1158,  906,
      185,  185,  185,  784,  185,  783,  185,  907, 1158,  909,
      185,  908,  185,  781,  185,  185,  185,  185,  785,  185,
      185,  185,  185,  782,  786,  185, 1158,  185,  185,  185,
      784,  185,  783,  185,  185,  185,  909,  910,  185,  185,
      185,  185,  974, 1158,  975, 1158,  185,  185,  185,  788,

      789,  786,  185,  787, 1158, 1158, 1158,  185,  185,  976,
      185,  185,  185,  185,  910,  185,  185,  185,  185,  974,
      185,  975,  790,  185,  185,  185,  788,  789,  185, 1158,
      787,  185,  185,  185,  185,  185,  976,  791,  185,  185,
      185,  792,  977,  978,  185,  185,  185,  185,  185,  790,
      185, 1158,  979, 1158,  185,  185,  185, 1158,  185,  185,
      185,  185,  185,  185,  791,  185,  185,  980,  792,  977,
      978,  185,  185,  185,  185,  185,  185,  185,  185,  979,
      185,  185,  185,  185,  185,  981,  982,  793,  185,  794,
      185,  185, 1158,  185,  980,  983,  795,  984, 1158,  185,

      797,  185,  185,  185,  987,  185,  185,  185,  185,  185,
      796,  185,  981,  982,  793,  185,  794, 1158,  185,  185,
      185,  988,  983,  795,  984,  185,  185,  797,  185,  185,
      185,  987,  185,  185,  185,  185,  799,  796,  185,  989,
      990,  185,  185,  185,  185,  798,  185,  185,  988,  991,
      985,  185,  185,  185,  986,  185,  185,  185, 1158,  185,
      185,  185,  185,  799, 1158,  185,  989,  990,  185,  185,
      185,  185,  798,  185,  185, 1158,  991,  985,  185,  185,
      185,  986,  185,  185,  185,  185,  800,  185,  185,  185,
      185,  805,  992,  801,  993,  185,  185,  185,  185,  802,

      185,  185,  803,  994, 1158, 1158,  185,  185,  995,  185,
      185,  185,  185,  800,  185,  185,  185,  185,  805,  992,
      801,  993,  185,  185,  185,  185,  802,  185,  185,  803,
      994,  804,  185,  185,  185,  995,  996,  185,  185,  997,
      185,  185,  806,  185,  998,  185,  999,  807, 1158,  185,
      185,  808, 1158, 1000,  185,  185, 1001, 1002,  804,  185,
      185, 1158,  185,  996,  185,  185,  997,  185,  809,  806,
      185,  998,  185,  999,  807,  185,  185,  185,  808,  810,
     1000,  185,  185, 1001, 1002, 1003,  185,  185,  185,  185,
     1004,  185,  185,  185, 1005,  809,  811,  185, 1006,  185,

      185, 1158,  185,  185,  185,  185,  810, 1007,  185,  185,
     1158,  185, 1003,  185,  185,  185,  185, 1004,  185,  185,
      185, 1005,  185,  811, 1008, 1006,  185,  185,  185, 1158,
      185,  185,  185, 1009, 1007,  185,  185,  185,  185,  812,
     1010,  185, 1158,  185,  185,  185,  813,  185, 1158,  185,
      185, 1008, 1011, 1012,  185,  185,  185, 1052,  185, 1053,
     1009, 1158,  185,  185,  185,  814,  812, 1010,  185,  185,
     1158,  185,  185,  813,  185,  185, 1158,  185,  185, 1011,
     1012,  185,  185,  185, 1052,  185, 1053,  815,  185, 1158,
      185,  185,  814,  816,  185, 1054,  185,  185, 1158,  185,

      185,  185,  185,  817,  185,  185,  185, 1056, 1158,  185,
      185, 1057,  185,  185,  815,  185,  185, 1058,  185, 1158,
      816,  185, 1054,  185,  185,  818,  185,  185,  185,  185,
      817,  185,  185,  185, 1056,  185,  819,  185, 1057,  185,
      185, 1059,  185,  185, 1058, 1060,  820, 1061,  185, 1158,
      185,  821,  818,  185,  185, 1062,  185, 1063,  185,  185,
      822,  185,  185,  819,  185, 1064,  185, 1065, 1059,  185,
      185,  185, 1060,  820, 1061,  185,  185, 1066,  821, 1158,
      185,  185, 1062,  185, 1063,  185,  185,  822,  185, 1158,
     1067,  185, 1064,  185, 1065,  823,  185,  185,  185, 1068,

     1158, 1158,  185,  185, 1066, 1158,  185,  185, 1069,  185,
      185,  824,  185,  185, 1158,  185,  826, 1067, 1070,  185,
      185,  185,  823,  185, 1090, 1091, 1068,  825,  185,  185,
     1158,  185,  827,  185,  185, 1069,  185,  185,  824,  185,
      185,  828,  185,  826,  185, 1070,  185,  185,  185, 1094,
      185, 1090, 1091, 1158,  825,  185,  185, 1092,  185,  827,
     1158,  185, 1095,  185,  185,  830, 1096,  185,  828,  185,
      829,  185,  185, 1093,  185,  185, 1094,  185,  185, 1097,
      832,  185,  185,  185, 1092,  185,  831,  185, 1098, 1095,
      185, 1099,  830, 1096,  185, 1158,  185,  829,  185,  185,

     1093, 1158,  185, 1100,  185,  185, 1097,  832,  185,  185,
      834,  833,  185,  831,  185, 1098,  185, 1101, 1099, 1102,
      185,  185,  835,  185, 1103,  185,  185, 1118,  185,  185,
     1100,  185, 1119,  185,  185,  185, 1158,  834,  833,  185,
      836,  185,  185,  185, 1101,  185, 1102,  185, 1158,  835,
      185, 1103,  185,  185, 1118,  185,  185,  185,  185, 1119,
      185,  185,  185,  185,  185, 1120,  185,  836,  185,  185,
      185,  185,  185,  837,  185,  185,  840, 1121,  838,  185,
      185,  185, 1122, 1158,  185,  185,  839,  185,  185, 1158,
      185,  185, 1120,  185, 1158, 1158, 1158,  185,  185,  185,

      837,  185,  185,  840, 1121,  838,  185,  185,  185, 1122,
      841,  185,  185,  839,  185,  185,  842,  185,  185, 1158,
      185,  185,  185,  844,  185,  185,  185,  185,  185,  843,
     1158, 1158, 1123,  185,  185,  185, 1158,  841,  185,  185,
      185, 1158, 1158,  842,  185,  185,  185, 1124,  185,  185,
      844,  185,  185,  185,  185,  185,  843,  185,  845, 1123,
     1132,  185,  185,  185, 1133,  185,  185,  185,  846,  185,
      185,  185,  185,  185, 1124,  185, 1134,  847,  185,  185,
      185, 1135,  185, 1158,  185,  845, 1158, 1132, 1140, 1158,
      185, 1133,  185,  185, 1141,  846,  185,  185,  185,  185,

     1142,  185,  185, 1134,  847,  185,  185,  185, 1135,  185,
      185,  185,  911,  185,  185, 1140,  185,  185, 1146,  185,
     1158, 1141, 1147,  185,  185, 1150,  185, 1142,  185, 1152,
     1154, 1156, 1158, 1158,  185, 1158,  912,  185,  185,  911,
      185,  185,  185,  185,  185, 1146,  185,  913,  185, 1147,
      185,  185, 1150,  185,  185,  185, 1152, 1154, 1156, 1158,
      185, 1158, 1158,  912,  185,  914,  915,  185, 1158,  185,
      185, 1158,  185, 1158,  913,  185, 1158,  185,  185, 1158,
     1158,  185,  185, 1158, 1158,  185, 1158,  185, 1158, 1158,
     1158,  185,  914,  915,  185, 1158,  185,  185,  916,  185,

     1158, 1158,  185, 1158,  185,  185,  917,  185,  185,  185,
     1158, 1158,  185,  185,  185, 1158, 1158, 1158,  185,  918,
      185,  185, 1158,  185,  185,  916,  185, 1158, 1158,  185,
     1158,  185,  185,  917,  185,  185,  185, 1158, 1158,  185,
      185,  185, 1158,  919,  185,  185,  918,  185,  185, 1158,
      185,  185, 1158,  185,  185,  920,  185,  185,  185,  185,
      922, 1158,  185, 1158, 1158, 1158,  185,  185, 1158,  185,
      919,  185,  185,  921,  924, 1158, 1158,  185,  185, 1158,
      185,  185,  920,  185,  185,  185,  185,  922, 1158,  185,
     1158,  185, 1158,  185,  185,  923,  185,  185, 1158,  185,

      921,  924,  185,  185,  185,  185, 1158,  185,  185,  185,
     1158,  927,  185,  185,  925,  185,  185,  926,  185,  185,
      185, 1158,  923, 1158,  185,  185, 1158, 1158, 1158,  185,
      185,  185,  185, 1158,  185,  185,  185, 1158,  927, 1158,
      185,  925,  185,  185,  926, 1158,  185,  185, 1158,  928,
      185,  185,  185,  929, 1158,  930,  185,  185, 1158,  185,
      185,  185,  185,  185,  185, 1158,  185,  185,  937, 1158,
     1158,  931, 1158,  185,  185,  185,  928,  185,  185,  185,
      929,  932,  930,  185,  185,  185, 1158,  185,  185,  185,
      185,  185,  185,  185,  185,  937, 1158,  185,  931,  933,

      185,  185,  185,  185, 1158,  934,  185,  185,  932, 1158,
      185, 1158,  185,  185, 1158,  185,  185, 1158, 1158,  185,
      185,  185,  185,  935,  185,  185,  933, 1158,  185,  185,
      185,  185,  934, 1158,  185, 1158, 1158,  185,  185, 1158,
      185,  936,  185,  185, 1158, 1158,  938,  185,  185,  185,
      935,  185,  185, 1158, 1158,  185,  185,  185,  185, 1158,
     1158,  185, 1158,  940,  185,  185,  185,  185,  936,  185,
      939, 1158,  185,  938,  185,  185, 1158, 1158,  185,  185,
     1158, 1158,  185,  185,  185, 1158, 1158, 1158,  185,  941,
      940,  185, 1158,  185,  185, 1158,  185,  939,  185,  185,

      942,  185,  185, 1158,  185,  943,  185,  185,  185, 1158,
      185,  185, 1158,  185, 1158,  185,  941, 1158, 1158, 1158,
      185, 1158, 1158,  185,  185,  185, 1158,  942, 1158,  185,
      185,  185,  943, 1158,  185,  185, 1158,  185,  185, 1158,
      185,  944,  185,  185,  945,  946,  185,  185, 1158,  185,
     1158,  185,  185, 1158, 1158, 1158,  185,  185, 1158,  185,
     1158,  185, 1158, 1158,  185, 1158, 1158,  185,  944,  185,
      185,  945,  946,  185,  185,  185,  185,  947,  948,  185,
     1158, 1158,  185,  185,  185,  185,  185, 1158,  185, 1158,
      185,  185, 1158, 1158,  185, 1158,  185,  185,  185, 1158,

     1158,  185,  185, 1158,  947,  948,  949,  185,  185,  185,
     1158,  185,  185,  185,  185, 1158,  950,  185,  185, 1158,
      185,  185, 1158,  185,  185,  185, 1158, 1158, 1158,  185,
     1158,  185,  185,  949,  185,  185,  185,  185,  185, 1158,
      185,  185, 1158,  950,  185,  185, 1158,  185,  185,  951,
      185, 1158,  952, 1158,  185,  185,  185, 1158,  185,  185,
      185,  185, 1158,  185,  185,  185, 1158,  185,  185, 1158,
      953,  185,  185, 1158, 1158, 1158,  951,  185,  185,  952,
      185,  185,  185,  185,  185, 1158,  185,  185,  185, 1158,
      185,  185, 1158,  185,  185,  185,  954,  953, 1158, 1158,

     1158, 1158, 1158,  185,  185,  185,  185,  185,  955,  185,
      185,  185,  185,  185, 1158, 1158,  956,  185,  185,  185,
      185, 1158, 1158,  954, 1158,  185, 1158,  957,  185, 1158,
      185,  185, 1158,  185,  185,  955,  185, 1158,  185,  185,
     1158,  185, 1158,  956,  958, 1158,  185,  185, 1158,  959,
      960,  185,  185,  185,  957,  185,  185,  961,  185, 1158,
      185,  185, 1158,  185,  185,  185,  185,  962,  185,  185,
     1158,  958,  185, 1158,  185,  185,  959,  960,  185,  185,
      185, 1158,  185,  185,  961, 1158, 1158,  185, 1158, 1158,
      185,  185,  185,  185,  962,  185,  185,  185,  185,  185,

     1158,  185,  185,  185,  963,  185,  185, 1158,  185,  185,
      185, 1158,  964, 1158,  185, 1158, 1158, 1158, 1158,  185,
      185, 1158,  185, 1158,  185,  185, 1158,  185,  185,  965,
      185,  963,  185, 1158,  966,  185,  185,  185,  185,  964,
      967,  185,  185, 1158,  185, 1158,  185,  185, 1158,  185,
     1158,  185,  185, 1158,  185, 1158,  965, 1158, 1158,  185,
     1158,  966,  185,  185,  968,  185, 1158,  967,  185,  185,
     1158,  185, 1158,  185, 1158,  185,  185, 1158,  185,  185,
     1158,  185, 1158,  969,  185, 1158,  185,  185, 1158,  185,
      185,  968, 1158,  185,  185,  185, 1158,  185, 1158,  185,

     1158, 1158,  185,  970, 1158, 1158,  185, 1158,  185,  185,
      969,  185, 1158, 1158,  185,  185, 1158,  185, 1158, 1158,
      185,  185,  185, 1158,  185,  971,  185, 1158,  185,  972,
      970,  185,  185,  185,  185, 1158,  185,  185,  185, 1158,
      185,  185,  185, 1158,  185,  185,  185, 1158, 1158,  185,
      973, 1158,  971,  185, 1158,  185,  972,  185,  185,  185,
     1158,  185, 1158,  185,  185,  185, 1158,  185,  185, 1158,
      185,  185,  185,  185, 1158, 1014,  185,  973, 1013,  185,
      185,  185,  185, 1158,  185,  185, 1158,  185,  185,  185,
      185, 1158,  185,  185, 1158, 1158, 1158,  185, 1015, 1158,

      185, 1158, 1014,  185, 1158, 1013,  185, 1158,  185,  185,
     1158,  185,  185, 1158,  185,  185,  185,  185, 1158,  185,
      185, 1158, 1016, 1158,  185, 1015,  185,  185, 1017,  185,
      185, 1018,  185, 1158,  185,  185,  185, 1158,  185,  185,
      185, 1158,  185,  185,  185, 1158, 1158,  185, 1158, 1016,
     1158,  185, 1158,  185, 1158, 1017,  185,  185, 1018,  185,
     1158,  185,  185,  185, 1158, 1019,  185,  185, 1158,  185,
      185,  185, 1158, 1020,  185,  185,  185,  185,  185, 1158,
      185,  185,  185,  185, 1158, 1158,  185, 1158,  185,  185,
      185, 1158, 1019,  185, 1021, 1158, 1022, 1158,  185, 1158,

     1020, 1158,  185,  185,  185,  185, 1158,  185,  185,  185,
      185, 1158,  185,  185, 1158,  185,  185,  185,  185, 1158,
      185, 1021, 1024, 1022,  185,  185, 1025,  185,  185, 1023,
      185, 1158, 1158,  185,  185, 1158, 1158,  185, 1158,  185,
      185,  185, 1158, 1158, 1158,  185, 1158, 1158, 1158, 1024,
     1158,  185,  185, 1025,  185,  185, 1023,  185, 1158, 1026,
      185,  185, 1158,  185,  185,  185, 1158,  185,  185,  185,
     1158,  185,  185, 1158,  185,  185,  185,  185, 1158, 1158,
      185, 1027, 1158, 1158,  185, 1158, 1026,  185,  185, 1158,
      185, 1158,  185, 1158, 1158, 1158,  185, 1158,  185,  185,

      185,  185,  185,  185,  185, 1158,  185,  185, 1027, 1158,
      185,  185, 1158,  185,  185,  185,  185, 1158,  185,  185,
     1158, 1028,  185,  185,  185,  185, 1158,  185,  185, 1029,
     1158,  185,  185,  185, 1158,  185, 1158,  185, 1158, 1030,
      185,  185, 1158,  185, 1158,  185,  185,  185, 1028,  185,
      185,  185,  185, 1158,  185,  185, 1029, 1158,  185,  185,
     1158, 1158,  185,  185, 1031, 1158, 1030, 1158,  185,  185,
     1158,  185,  185, 1158,  185, 1158,  185,  185,  185, 1158,
     1032,  185,  185, 1033,  185,  185, 1158,  185,  185, 1158,
      185, 1031, 1158,  185, 1158,  185,  185, 1158,  185,  185,

      185, 1158, 1034,  185,  185,  185, 1158, 1032, 1158,  185,
     1033,  185,  185, 1158,  185,  185, 1158,  185,  185, 1035,
      185, 1158,  185,  185,  185, 1158,  185,  185,  185, 1034,
      185,  185,  185, 1158,  185, 1036,  185, 1037, 1158,  185,
     1158,  185,  185, 1158,  185,  185, 1035, 1158, 1158,  185,
      185,  185, 1158,  185,  185,  185, 1158,  185,  185,  185,
      185,  185, 1036,  185, 1037, 1158,  185,  185,  185,  185,
     1158,  185,  185, 1158, 1158, 1158,  185,  185, 1039, 1158,
     1158,  185, 1158, 1158,  185,  185, 1158,  185, 1158,  185,
      185, 1158, 1158, 1038,  185,  185,  185, 1158,  185,  185,

     1040, 1158,  185,  185,  185, 1039, 1158, 1158,  185, 1158,
     1042,  185,  185,  185,  185, 1158,  185,  185,  185,  185,
     1038,  185,  185,  185,  185, 1158,  185, 1040, 1158,  185,
      185,  185, 1158, 1158, 1041,  185,  185, 1042, 1043, 1158,
      185,  185,  185, 1158, 1044,  185,  185, 1158,  185,  185,
      185,  185, 1158,  185, 1045, 1158, 1158,  185,  185, 1158,
      185, 1041,  185,  185, 1158, 1043,  185,  185, 1046,  185,
     1158, 1044,  185, 1158, 1158,  185,  185,  185, 1158,  185,
     1158, 1045, 1158, 1047,  185,  185, 1158,  185, 1158,  185,
     1048,  185, 1158,  185,  185, 1046,  185, 1158,  185,  185,

     1158,  185,  185,  185, 1158, 1158,  185,  185, 1158,  185,
     1047, 1158,  185,  185,  185,  185, 1049, 1048,  185,  185,
     1158, 1158,  185,  185, 1158,  185,  185, 1158,  185, 1158,
      185,  185,  185, 1158,  185, 1158,  185,  185,  185, 1158,
      185,  185,  185, 1049,  185,  185,  185, 1158,  185,  185,
      185, 1158, 1158,  185,  185, 1158,  185, 1050,  185,  185,
      185,  185, 1158,  185,  185,  185,  185, 1051, 1158, 1158,
     1158,  185,  185,  185, 1158,  185,  185,  185, 1158,  185,
     1158,  185,  185,  185, 1050,  185, 1158,  185,  185,  185,
      185, 1071,  185,  185, 1051,  185, 1158, 1158,  185, 1158,

      185,  185, 1158,  185,  185, 1158,  185,  185,  185,  185,
     1158,  185,  185,  185, 1158, 1158,  185, 1158, 1071,  185,
      185, 1158,  185,  185,  185,  185, 1158, 1158,  185, 1073,
      185,  185, 1158, 1158,  185,  185,  185,  185,  185, 1158,
      185, 1072,  185, 1158, 1158, 1158, 1158,  185,  185, 1158,
      185,  185,  185, 1158, 1075,  185, 1073,  185,  185, 1158,
     1158,  185, 1158,  185,  185,  185, 1074,  185, 1072,  185,
     1076,  185, 1158, 1158,  185,  185, 1158,  185, 1158,  185,
     1158, 1075,  185, 1158,  185,  185, 1158, 1158,  185,  185,
     1077, 1158,  185,  185,  185,  185, 1158, 1076,  185,  185,

     1158,  185,  185, 1158,  185, 1158,  185, 1158,  185, 1158,
     1078,  185,  185, 1158,  185, 1158,  185, 1077,  185, 1158,
      185,  185,  185, 1158, 1158,  185,  185, 1079, 1158,  185,
      185, 1158, 1158,  185,  185,  185,  185, 1078, 1158,  185,
      185,  185, 1158,  185, 1158,  185, 1158,  185,  185,  185,
     1158, 1080,  185, 1158, 1079,  185, 1158,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185, 1081, 1158,
      185,  185,  185,  185,  185, 1082,  185,  185, 1080, 1158,
     1158,  185,  185,  185, 1158,  185,  185,  185,  185,  185,
      185,  185,  185,  185, 1158, 1081, 1158, 1158,  185,  185,

      185,  185, 1082,  185,  185,  185, 1084,  185,  185,  185,
      185,  185,  185, 1158,  185,  185,  185,  185,  185,  185,
     1158, 1158, 1158, 1158, 1083, 1158, 1158, 1158,  185,  185,
      185,  185,  185, 1084,  185,  185,  185,  185,  185,  185,
     1158,  185,  185,  185,  185,  185,  185,  185,  185, 1158,
     1158, 1083, 1158,  185,  185, 1158,  185, 1158,  185, 1158,
      185,  185,  185, 1158,  185, 1085,  185, 1158, 1158,  185,
      185,  185,  185, 1158,  185,  185,  185, 1087, 1086,  185,
      185,  185, 1158,  185, 1158,  185, 1158,  185,  185, 1158,
     1158,  185, 1085,  185, 1158,  185,  185,  185,  185,  185,

     1088,  185,  185,  185, 1087, 1086,  185, 1158,  185,  185,
      185,  185,  185, 1089, 1158, 1158, 1158,  185,  185, 1158,
      185, 1158,  185,  185,  185,  185,  185, 1088,  185,  185,
     1158, 1158, 1158,  185, 1158,  185,  185,  185,  185, 1104,
     1089, 1158,  185,  185,  185, 1158,  185,  185,  185, 1158,
      185,  185,  185,  185, 1158,  185, 1158, 1105, 1158,  185,
      185,  185, 1106, 1158,  185, 1158, 1104,  185, 1158,  185,
      185, 1158, 1158,  185,  185,  185, 1158,  185, 1107,  185,
     1158, 1158,  185, 1158, 1105,  185,  185,  185,  185, 1106,
     1158,  185, 1158,  185,  185, 1158, 1108,  185,  185, 1158,

      185,  185,  185,  185, 1158, 1107, 1158, 1158,  185, 1158,
      185, 1158,  185, 1158,  185,  185, 1158, 1158,  185, 1158,
      185, 1158, 1158, 1108,  185,  185,  185,  185, 1109,  185,
      185, 1158,  185, 1158,  185,  185, 1110,  185,  185,  185,
      185, 1158,  185, 1158,  185, 1158, 1158,  185, 1158, 1158,
     1158,  185, 1158,  185, 1158, 1109,  185, 1158, 1158,  185,
     1111,  185,  185, 1110, 1158,  185,  185,  185, 1158,  185,
     1158,  185, 1158, 1112,  185,  185, 1158, 1113,  185,  185,
      185,  185, 1114,  185,  185,  185,  185, 1111,  185,  185,
      185, 1158,  185,  185, 1158, 1158,  185,  185, 1158, 1158,

     1112, 1158,  185, 1158, 1113, 1158,  185,  185,  185, 1114,
      185,  185,  185,  185, 1158,  185,  185,  185, 1158,  185,
      185, 1158,  185,  185,  185,  185,  185, 1115,  185, 1158,
     1158, 1117,  185, 1158,  185,  185, 1125,  185,  185,  185,
      185, 1158, 1158,  185, 1116, 1158, 1158,  185, 1158,  185,
      185, 1126,  185,  185, 1115,  185, 1158, 1158, 1117,  185,
     1158,  185,  185, 1125, 1158,  185,  185,  185, 1127,  185,
      185, 1116, 1158, 1158,  185, 1128,  185, 1158, 1126,  185,
      185, 1129,  185,  185, 1158,  185,  185, 1158,  185, 1158,
     1158, 1158,  185,  185,  185, 1127,  185,  185,  185, 1158,

     1158,  185, 1128,  185,  185, 1158,  185,  185, 1129,  185,
      185,  185,  185,  185, 1158,  185,  185,  185, 1158,  185,
      185,  185,  185,  185, 1158,  185,  185,  185,  185,  185,
      185,  185,  185,  185, 1158,  185, 1158, 1158,  185,  185,
      185,  185, 1130,  185,  185, 1158, 1158, 1158,  185,  185,
      185, 1158,  185,  185,  185, 1158,  185,  185,  185,  185,
      185, 1158,  185, 1158, 1131,  185,  185,  185,  185, 1130,
      185,  185, 1136, 1158, 1158,  185,  185,  185, 1158,  185,
      185, 1158, 1158,  185,  185,  185,  185, 1158,  185,  185,
     1138, 1131,  185,  185,  185,  185, 1158,  185,  185, 1136,

     1158,  185,  185,  185,  185, 1137,  185,  185, 1158, 1158,
      185,  185,  185,  185, 1158,  185,  185, 1138, 1158,  185,
      185,  185,  185, 1158,  185,  185, 1158, 1158,  185,  185,
      185,  185, 1137,  185, 1158, 1139, 1143,  185,  185,  185,
     1158,  185,  185, 1144, 1145, 1158,  185,  185,  185, 1158,
     1158,  185,  185,  185,  185,  185, 1158,  185,  185,  185,
     1158, 1158, 1139, 1143,  185,  185,  185, 1158,  185,  185,
     1144, 1145,  185, 1158,  185,  185, 1158,  185,  185, 1158,
      185,  185,  185,  185, 1158,  185,  185, 1158, 1158, 1148,
      185, 1158, 1158,  185,  185,  185,  185, 1158, 1158,  185,

      185,  185,  185, 1158,  185,  185, 1158,  185,  185,  185,
      185, 1149,  185, 1151, 1158, 1158, 1148,  185, 1153,  185,
      185,  185,  185,  185, 1158,  185,  185,  185,  185,  185,
     1158,  185, 1157,  185,  185,  185,  185,  185, 1149, 1158,
     1151, 1155,  185, 1158,  185, 1153,  185,  185,  185, 1158,
     1158, 1158,  185,  185, 1158,  185, 1158, 1158,  185, 1157,
      185, 1158, 1158, 1158,  185, 1158, 1158, 1158, 1155,  185,
     1158,  185, 1158, 1158, 1158,  185, 1158, 1158, 1158, 1158,
     1158, 1158,  185,   45,   45,   45,   45,   85, 1158, 1158,
       85,   86, 1158,   86,   86,  172, 1158,  172,  172,  175,

     1158,  175,  175,  176, 1158,  176,  176,    7, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158
    } ;

static const flex_int16_t yy_chk[6576] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15,   27,
       15,   17,   17,   18,   18,   20,   20,   20,   26,   20,
       29,   21, 1162,   30,   26,   20,   32,   20,   21,  982,
       36,   21,   20,   20,   20,   96,   27,   42,   42,   47,
       47,   21,   20,   20,   20,   26,   20,   29,   21,   22,
       30,   26,   20,   32,   20,   21,   22,   36,   21,   20,
       20,   20,   96,   22,   42,   42,   22,   23,   21,   22,

      368,   23,   35,  263,   24,   23,   22,   53,   35,   53,
       41,   23,  181,   22,   23,   24,  180,   24,   41,   25,
       22,  176,   24,   22,   23,  175,   22,   24,   23,   35,
       25,   24,   23,   25,   91,   35,   25,   41,   23,   25,
       97,   23,   24,   31,   24,   41,   25,   31,   33,   24,
       98,   28,   28,   31,   24,   48,   48,   25,   28,   28,
       25,   34,   33,   25,   28,   90,   25,   97,   33,   34,
       31,   55,   55,   34,   31,   33,   34,   98,   28,   28,
       31,   56,   56,   38,   99,   28,   28,   38,   34,   33,
       37,   28,   83,   83,   37,   33,   34,   40,   37,   40,

       34,   39,   40,   34,   37,   39,   89,   89,   39,  101,
       38,   99,  101,  102,   38,   39,  103,   37,   39,  173,
      173,   37,  179,  179,   40,   37,   40,   86,   39,   40,
       85,   37,   39,   82,   57,   39,  101,   54,   52,  101,
      102,   50,   39,  103,   49,   39,   58,   58,   44,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   59,   59,   59,   59,   59,  104,  100,
      105,  105,  106,   59,  107,   59,   59,  100,  109,  110,
       59,   59,   59,   19,  105,  113,   59,   16,  114,  116,
       59,   59,   59,   59,   59,  104,  100,  105,  105,  106,
       59,  107,   59,   59,  100,  109,  110,   59,   59,   59,
       64,  105,  113,   59,   60,  114,  116,   64,   60,   14,
       64,   60,   65,   64,  117,   60,   65,   11,   60,  118,
       64,   60,  119,   65,   60,    7,   65,   64,   60,    0,
      120,   60,    0,    0,   64,   60,   65,   64,   60,   65,

       64,  117,   60,   65,  112,   60,  118,   64,   60,  119,
       65,   60,   67,   65,  112,   60,   61,  120,   68,   67,
       61,  121,   67,   65,   61,   68,  122,   61,   68,  124,
       61,  112,   67,   61,    0,  111,  111,  111,   68,   67,
       61,  112,    0,   61,  125,   68,   67,   61,  121,   67,
        0,   61,   68,  122,   61,   68,  124,   61,  126,   67,
       61,   74,  111,  111,  111,   68,  127,   61,   62,   74,
       69,  125,   62,   74,   69,  128,   74,   69,  129,   62,
       69,   62,   62,  130,    0,  126,   62,  131,   74,    0,
       69,   62,   62,  127,  133,   62,   74,   69,    0,   62,

       74,   69,  128,   74,   69,  129,   62,   69,   62,   62,
      130,   70,    0,   62,  131,   70,   71,   69,   62,   62,
       63,  133,   70,   71,  134,   70,  123,   63,  136,  137,
       71,   63,  123,   71,   63,   70,   71,   63,   70,  123,
       63,    0,   70,   71,  138,  139,    0,   63,    0,   70,
       71,  134,   70,  123,   63,  136,  137,   71,   63,  123,
       71,   63,   70,   71,   63,  141,  123,   63,   66,  142,
       73,  138,  139,   66,   66,  140,   73,  140,   73,   66,
       66,   66,   73,  143,  144,   73,   66,  145,    0,  146,
        0,   66,  141,  148,    0,   66,  142,   73,    0,    0,

       66,   66,  140,   73,  140,   73,   66,   66,   66,   73,
      143,  144,   73,   66,  145,   81,  146,   75,   66,   72,
      148,   75,  149,   81,   72,   75,   72,   81,  150,    0,
       81,   75,   72,   72,   75,    0,   72,    0,    0,   72,
      152,    0,   81,    0,   75,    0,   72,  153,   75,  149,
       81,   72,   75,   72,   81,  150,  115,   81,   75,   72,
       72,   75,  115,   72,   76,  151,   72,  152,   76,  115,
      115,   79,   76,  151,  153,   79,  155,    0,   76,   79,
      157,   76,    0,  115,  159,   79,    0,    0,   79,  115,
        0,   76,  151,  156,    0,   76,  115,  115,   79,   76,

      151,  161,   79,  155,  156,   76,   79,  157,   76,   77,
      158,  159,   79,   77,  135,   79,   77,   77,  158,  135,
      156,  160,  164,   77,  135,  163,   77,    0,  161,  135,
      135,  156,  160,  163,  165,    0,   77,  158,  166,    0,
       77,  135,    0,   77,   77,  158,  135,  169,  160,  164,
       77,  135,  163,   77,   78,  168,  135,  135,  170,  160,
      163,  165,   78,  167,   78,  166,   78,   78,  168,   78,
        0,  185,  167,  264,  169,    0,  265,    0,    0,  185,
      267,   78,  168,  185,    0,  170,  185,    0,  269,   78,
      167,   78,  270,   78,   78,  168,   78,   80,  185,  167,

      264,   80,  186,  265,   80,   80,  185,  267,  273,  186,
      185,   80,  186,  185,   80,  269,  274,    0,  275,  270,
        0,    0,  186,    0,   80,    0,    0,  276,   80,  186,
        0,   80,   80,    0,  277,  273,  186,  278,   80,  186,
        0,   80,  154,  274,  154,  275,    0,  154,  154,  186,
      154,    0,  187,  154,  276,  154,  279,  154,  189,  187,
      154,  277,  187,    0,  278,  189,  281,  187,  189,  154,
        0,  154,  187,  189,  154,  154,  283,  154,  189,  187,
      154,  285,  154,  279,  154,  189,  187,  154,  282,  187,
      188,  188,  189,  281,  187,  189,  214,  282,  188,  187,

      189,  188,  214,  283,  286,  189,  190,  284,  285,  214,
      192,  188,  192,  190,  287,  282,  190,  188,  188,  192,
      284,  190,  192,  214,  282,  188,  190,    0,  188,  214,
        0,  286,  192,  190,  284,  193,  214,  192,  188,  192,
      190,  287,  193,  190,    0,  193,  192,  284,  190,  192,
      193,    0,  203,  190,  191,  193,  194,  191,  191,  192,
      203,  288,  193,  194,  203,  191,  194,  203,  191,  193,
      289,  194,  193,  290,  289,    0,  194,  193,  191,  203,
        0,  191,  193,  194,  191,  191,  291,  203,  288,  196,
      194,  203,  191,  194,  203,  191,  196,  289,  194,  196,

      290,  289,  218,  194,  292,  191,  195,  195,  218,  196,
        0,  218,  197,  291,  195,  218,  196,  198,  195,  197,
      195,  195,  197,  196,  198,  293,  196,  198,    0,  218,
        0,  292,  197,  195,  195,  218,  196,  198,  218,  197,
      294,  195,  218,  199,  198,  195,  197,  195,  195,  197,
      199,  198,  293,  199,  198,  200,  280,  199,  280,  197,
        0,  202,  200,  199,  198,  200,    0,  294,  202,  295,
      199,  202,  296,  280,  297,  200,    0,  199,  299,  204,
      199,  202,  200,  280,  199,  280,    0,  204,  202,  200,
      199,  204,  200,  204,  204,  202,  295,  300,  202,  296,

      280,  297,  200,  201,  300,  299,  204,    0,  202,  208,
      201,  201,  201,  201,  204,    0,  208,  301,  204,  208,
      204,  204,  302,  201,  300,  303,  304,    0,  206,  208,
      201,  300,    0,    0,  206,    0,  208,  201,  201,  201,
      201,  206,  206,  208,  301,  305,  208,    0,    0,  302,
      201,  205,  303,  304,  222,  206,  208,  205,    0,  205,
      222,  206,  207,  205,  205,  205,  205,  222,  206,  206,
      207,  306,  305,  209,  207,  209,  307,  207,  205,  308,
      309,  222,  209,    0,  205,  209,  205,  222,    0,  207,
      205,  205,  205,  205,  222,  209,    0,  207,  306,    0,

      209,  207,  209,  307,  207,  210,  308,  309,  211,  209,
      211,  210,  209,  310,  311,  215,  211,  212,  210,  210,
      212,  215,  209,  211,  211,  312,  212,  215,  215,  313,
        0,  314,  210,  212,  212,  211,    0,  211,  210,  315,
      310,  311,  215,  211,  212,  210,  210,  212,  215,  316,
      211,  211,  312,  212,  215,  215,  313,  216,  314,    0,
      212,  212,  213,  216,  316,  213,  315,  317,  213,  318,
      216,  213,  216,  319,  217,  213,  316,  317,  213,  213,
      217,  321,    0,  322,  216,    0,  217,  217,    0,  213,
      216,  316,  213,  323,  317,  213,  318,  216,  213,  216,

      319,  217,  213,  219,  317,  213,  213,  217,  321,  219,
      322,  220,  221,  217,  217,  219,  219,  220,  221,  324,
      323,  223,  227,  220,  220,  221,    0,  223,  227,  325,
      219,  221,  223,    0,  223,  227,  219,  326,  220,  221,
      327,  328,  219,  219,  220,  221,  324,  224,  223,  227,
      220,  220,  221,  224,  223,  227,  325,  224,  221,  223,
      224,  223,  227,  329,  326,  330,  331,  327,  328,  228,
      226,  332,    0,  237,  224,  228,  226,    0,    0,  237,
      224,  226,  228,  226,  224,  333,  237,  224,  225,  225,
      329,  228,  330,  331,  225,  334,  228,  226,  332,  225,

      237,  225,  228,  226,  225,  225,  237,    0,  226,  228,
      226,  229,  333,  237,  229,  225,  225,  229,  228,  335,
      336,  225,  334,  231,  229,  337,  225,  230,  225,  231,
      338,  225,  225,  230,  231,  230,  231,  230,  229,    0,
      230,  229,  232,  339,  229,    0,  335,  336,  232,  340,
      231,  229,  337,    0,  230,  232,  231,  338,    0,  232,
      230,  231,  230,  231,  230,  341,  233,  230,  234,  232,
      339,  235,  233,  342,  234,  232,  340,  235,  343,  233,
      235,  234,  232,  233,  235,  234,  232,    0,  344,    0,
      238,  238,  341,  233,  345,  234,  238,  346,  235,  233,

      342,  234,  347,  238,  235,  343,  233,  235,  234,    0,
      233,  235,  234,  236,  239,  344,  236,  238,  238,  236,
      239,  345,    0,  238,  346,    0,  236,  239,  349,  347,
      238,  239,  350,  352,  240,    0,  240,  241,    0,  241,
      236,  239,  240,  236,    0,  241,  236,  239,    0,  240,
      353,    0,  241,  236,  239,  349,  354,  355,  239,  350,
      352,  240,  243,  240,  241,  242,  241,  242,  243,  240,
      356,  242,  241,  357,  359,  243,  240,  353,  242,  241,
        0,    0,    0,  354,  355,    0,  358,    0,  358,  243,
        0,  360,  242,  361,  242,  243,  362,  356,  242,  363,

      357,  359,  243,  245,  364,  242,  244,  245,  244,  245,
      366,  244,  244,  358,  244,  358,  245,  244,  360,  244,
      361,  244,    0,  362,  244,    0,  363,  472,    0,    0,
      245,  364,  473,  244,  245,  244,  245,  366,  244,  244,
        0,  244,  474,  245,  244,  475,  244,  246,  244,  247,
        0,  244,  248,  246,  472,  247,  246,  365,  248,  473,
      246,  365,  247,  249,  249,  248,  248,  246,  247,  474,
      249,  476,  475,  477,  246,    0,  247,  249,    0,  248,
      246,    0,  247,  246,  365,  248,    0,  246,  365,  247,
      249,  249,  248,  248,  246,  247,  250,  249,  476,  251,

      477,  251,  250,  478,  249,  251,  250,  252,  254,  250,
      479,  480,  251,  252,  254,  481,  253,  250,  253,    0,
      252,  254,    0,  250,  253,    0,  251,    0,  251,  250,
      478,  253,  251,  250,  252,  254,  250,  479,  480,  251,
      252,  254,  481,  253,  250,  253,  256,  252,  254,  255,
      255,  253,  256,    0,  257,  255,  483,    0,  253,  256,
      257,  484,  255,  257,    0,  487,    0,  257,    0,    0,
        0,  488,  489,  256,    0,    0,  255,  255,  258,  256,
      258,  257,  255,  483,  258,  490,  256,  257,  484,  255,
      257,  258,  487,  258,  257,  259,  260,  259,  488,  489,

        0,  259,  260,  491,  369,  258,  492,  258,  259,  260,
      369,  258,  490,  260,  493,  494,    0,  369,  258,  369,
      258,  370,  259,  260,  259,    0,  371,  370,  259,  260,
      491,  369,  371,  492,  370,  259,  260,  369,    0,  371,
      260,  493,  494,  372,  369,  372,  369,  495,  370,  372,
      496,  373,  376,  371,  370,  497,  372,  373,  376,  371,
      498,  370,  375,  499,  373,  376,  371,  374,  375,  374,
      372,  375,  372,  374,  495,  375,  372,  496,  373,  376,
      374,  501,  497,  372,  373,  376,  502,  498,  503,  375,
      499,  373,  376,  377,  374,  375,  374,  507,  375,  377,

      374,  378,  375,  378,  508,  379,  377,  374,  501,  378,
      509,  379,  510,  502,    0,  503,  378,  379,  379,    0,
      377,  381,  511,    0,  507,  513,  377,  381,  378,  380,
      378,  508,  379,  377,  381,  380,  378,  509,  379,  510,
      382,  380,  380,  378,  379,  379,  382,  514,  381,  511,
      383,  383,  513,  382,  381,    0,  380,  383,    0,  518,
      382,  381,  380,  519,  383,  520,  384,  382,  380,  380,
      521,  522,  384,  382,  514,  384,  523,  383,  383,  384,
      382,    0,  386,  385,  383,  385,  518,  382,  386,  385,
      519,  383,  520,  384,    0,  386,  385,  521,  522,  384,

      385,    0,  384,  523,    0,    0,  384,    0,  387,  386,
      385,  524,  385,  525,  387,  386,  385,  387,  388,  389,
      526,  387,  386,  385,  388,  389,  387,  385,  388,  529,
      533,  388,  389,  389,  390,  387,  390,    0,  524,  535,
      525,  387,  390,    0,  387,  388,  389,  526,  387,  390,
        0,  388,  389,  387,  536,  388,  529,  533,  388,  389,
      389,  390,  391,  390,  392,  393,  535,  393,  391,  390,
      392,    0,  537,  393,  539,  391,  390,  392,  391,  392,
      393,  536,    0,    0,    0,    0,    0,  527,    0,  391,
      540,  392,  393,  541,  393,  391,    0,  392,  527,  537,

      393,  539,  391,  543,  392,  391,  392,  393,  394,  395,
      394,  395,  394,  396,  527,  395,  394,  540,    0,  396,
      541,  544,  395,  394,  545,  527,  396,    0,  398,    0,
      543,    0,  546,    0,  398,  394,  395,  394,  395,  394,
      396,  398,  395,  394,    0,  398,  396,    0,  544,  395,
      394,  545,  397,  396,  397,  398,  399,  399,  400,  546,
      397,  398,  548,  399,  400,    0,  549,  397,  398,  401,
      399,  400,  398,  550,  401,  401,    0,    0,    0,  397,
      551,  397,  401,  399,  399,  400,  402,  397,  402,  548,
      399,  400,  402,  549,  397,  552,  401,  399,  400,  402,

      550,  401,  401,  404,  403,  404,  553,  551,  554,  401,
      403,  404,    0,  402,  405,  402,  555,  403,  404,  402,
      556,  405,  552,  406,  405,  557,  402,  558,  559,  406,
      404,  403,  404,  553,  405,  554,  406,  403,  404,  406,
      407,  405,    0,  555,  403,  404,  407,  556,  405,  407,
      406,  405,  557,  407,  558,  559,  406,  560,  561,  408,
        0,  405,  409,  406,  409,  408,  406,  407,  408,  410,
      409,  410,  408,  407,  564,  410,  407,  409,  565,    0,
      407,  412,  410,    0,  560,  561,  408,  412,  566,  409,
      412,  409,  408,  567,  412,  408,  410,  409,  410,  408,

      411,  564,  410,  568,  409,  565,  411,    0,  412,  410,
      411,  413,  413,  411,  412,  566,  414,  412,  413,    0,
      567,  412,  414,    0,  569,  413,    0,  411,  570,  414,
      568,  571,    0,  411,  414,  415,    0,  411,  413,  413,
      411,  415,    0,  414,  417,  413,  417,  416,  415,  414,
      417,  569,  413,  416,  573,  570,  414,  417,  571,  416,
      416,  414,  415,  418,    0,  418,  419,  575,  415,  418,
      470,  417,  419,  417,  416,  415,  418,  417,  470,  419,
      416,  573,  470,  419,  417,  470,  416,  416,    0,  420,
      418,  420,  418,  419,  575,  420,  418,  470,  421,  419,

      421,  423,  420,  418,  421,  470,  419,  423,    0,  470,
      419,  421,  470,  422,  423,  421,  420,  576,  420,  423,
      422,    0,  420,  422,  424,  421,  425,  421,  423,  420,
      424,  421,  425,  422,  423,  424,  683,  424,  421,  425,
      422,  423,  421,  427,  576,  427,  423,  422,  426,  427,
      422,  424,  686,  425,  426,    0,  427,  424,  687,  425,
      422,  426,  424,  683,  424,  426,  425,  428,    0,    0,
      427,  688,  427,  428,  689,  426,  427,    0,  429,  686,
      428,  426,  429,  427,  429,  687,  691,  692,  426,  430,
      431,  429,  426,  432,  428,  430,  431,    0,  688,  432,

      428,  689,  430,  431,  432,  429,  432,  428,  431,  429,
      693,  429,    0,  691,  692,  433,  430,  431,  429,  695,
      432,  433,  430,  431,  433,    0,  432,  696,  433,  430,
      431,  432,  697,  432,  434,  431,  698,  693,    0,  435,
      434,  435,  433,  699,    0,  435,  695,  434,  433,    0,
      434,  433,  435,    0,  696,  433,  436,    0,  436,  697,
        0,  434,  436,  698,    0,  437,  435,  434,  435,  436,
      699,  437,  435,  700,  434,  702,  437,  434,  437,  435,
      438,  439,  440,  436,  438,  436,  438,  439,  440,  436,
      703,  439,  437,  438,  439,  440,  436,  440,  437,    0,

      700,    0,  702,  437,    0,  437,    0,  438,  439,  440,
      441,  438,  704,  438,  439,  440,  441,  703,  439,  442,
      438,  439,  440,  441,  440,  442,  441,  443,  442,  444,
      705,  444,  442,  443,  706,  444,  707,  441,  446,  704,
      443,  708,  444,  441,  446,  443,  442,  709,    0,  446,
      441,  446,  442,  441,  443,  442,  444,  705,  444,  442,
      443,  706,  444,  707,  445,  446,  445,  443,  708,  444,
      445,  446,  443,  447,  709,  447,  446,  445,  446,  447,
      448,  449,  448,  710,  711,    0,  447,  449,  448,    0,
      449,  445,  712,  445,  449,  448,    0,  445,  713,  450,

      447,    0,  447,  714,  445,  450,  447,  448,  449,  448,
      710,  711,  450,  447,  449,  448,  450,  449,  451,  712,
      716,  449,  448,  451,  451,  713,  450,  452,  453,  456,
      714,  451,  450,  452,  453,  456,  452,    0,    0,  450,
      452,  453,  456,  450,    0,  451,  454,  716,  454,    0,
      451,  451,  454,  718,  452,  453,  456,  719,  451,  454,
      452,  453,  456,  452,  455,  457,  455,  452,  453,  456,
      455,  457,  720,  454,  457,  454,  458,  455,  457,  454,
      718,    0,  458,  721,  719,    0,  454,  722,    0,  458,
        0,  455,  457,  455,  459,    0,  724,  455,  457,  720,

      459,  457,  460,  458,  455,  457,  461,  459,  460,  458,
      721,  459,  461,  460,  722,  460,  458,  461,  462,  461,
        0,  459,  462,  724,  462,  725,    0,  459,    0,  460,
      726,  462,    0,  461,  459,  460,    0,  727,  459,  461,
      460,  463,  460,    0,  461,  462,  461,  463,  464,  462,
      464,  462,  725,  463,  463,  463,  464,  726,  462,  465,
      466,    0,    0,  464,  727,  465,  466,    0,  463,  728,
      465,    0,  465,  466,  463,  464,    0,  464,  466,    0,
      463,  463,  463,  464,  731,  467,  465,  466,  468,  469,
      464,  467,  465,  466,  468,  469,  728,  465,  467,  465,

      466,  468,  469,  467,  471,  466,  469,  577,  468,  471,
      471,  731,  467,  577,  732,  468,  469,  471,  467,  733,
      577,  468,  469,  736,  577,  467,  578,  737,  468,  469,
      467,  471,  578,  469,  577,  468,  471,  471,  578,  578,
      577,  732,  579,  580,  471,  740,  733,  577,  579,  580,
      736,  577,  741,  578,  737,  579,  580,  579,  580,  578,
      742,  743,    0,    0,    0,  578,  578,  581,  582,  579,
      580,  744,  740,  581,  582,  579,  580,    0,    0,  741,
      581,  582,  579,  580,  579,  580,  583,  742,  743,  581,
      584,  585,  583,    0,  581,  582,  584,  585,  744,  583,

      581,  582,  585,  584,  585,  584,    0,  581,  582,  586,
      745,  586,    0,  583,  587,  586,  581,  584,  585,  583,
      587,  746,  586,  584,  585,  747,  583,  587,    0,  585,
      584,  585,  584,  588,    0,  588,  586,  745,  586,  588,
      749,  587,  586,  589,  590,  589,  588,  587,  746,  586,
      590,  589,  747,    0,  587,  591,  750,  590,  589,    0,
      588,  591,  588,    0,    0,    0,  588,  749,  591,  751,
      589,  590,  589,  588,    0,  753,  754,  590,  589,  755,
      595,  592,  591,  750,  590,  589,  595,  592,  591,  592,
      593,  594,  593,  595,  592,  591,  751,  594,  593,  757,

        0,  594,  753,  754,  594,  593,  755,  595,  592,    0,
        0,    0,    0,  595,  592,    0,  592,  593,  594,  593,
      595,  592,  758,    0,  594,  593,  757,  596,  594,  597,
      760,  594,  593,  596,  761,  597,  596,  599,  598,  600,
      596,  600,  597,  599,  598,  600,  597,    0,    0,  758,
      599,  598,  600,  599,  596,  598,  597,  760,    0,  762,
      596,  761,  597,  596,  599,  598,  600,  596,  600,  597,
      599,  598,  600,  597,  601,  601,    0,  599,  598,  600,
      599,  601,  598,  604,  603,  602,  762,  764,  601,  604,
      603,  602,  849,    0,  851,    0,  604,  603,  602,  603,

      604,  601,  601,  602,    0,    0,    0,  605,  601,  853,
      604,  603,  602,  605,  764,  601,  604,  603,  602,  849,
      605,  851,  606,  604,  603,  602,  603,  604,  606,    0,
      602,  607,  608,  609,  605,  606,  853,  607,  608,  609,
      605,  608,  854,  855,  607,  608,  609,  605,  610,  606,
      611,    0,  856,    0,  610,  606,  611,    0,  607,  608,
      609,  610,  606,  611,  607,  608,  609,  859,  608,  854,
      855,  607,  608,  609,  612,  610,  613,  611,  614,  856,
      612,  610,  613,  611,  614,  860,  862,  612,  610,  613,
      611,  614,    0,  615,  859,  863,  614,  864,    0,  615,

      616,  612,  616,  613,  868,  614,  615,  612,  616,  613,
      615,  614,  860,  862,  612,  616,  613,    0,  614,  617,
      615,  872,  863,  614,  864,  617,  615,  616,  618,  616,
      619,  868,  617,  615,  618,  616,  619,  615,  620,  874,
      875,  618,  616,  619,  620,  618,  617,  621,  872,  878,
      865,  620,  617,  621,  865,  618,  622,  619,    0,  617,
      621,  618,  622,  619,    0,  620,  874,  875,  618,  622,
      619,  620,  618,  623,  621,    0,  878,  865,  620,  623,
      621,  865,  624,  622,  625,  628,  623,  621,  624,  622,
      625,  628,  879,  624,  880,  624,  622,  625,  628,  625,

      623,  626,  626,  882,    0,    0,  623,  626,  883,  624,
      627,  625,  628,  623,  626,  624,  627,  625,  628,  879,
      624,  880,  624,  627,  625,  628,  625,  629,  626,  626,
      882,  627,  630,  629,  626,  883,  884,  627,  630,  886,
      629,  626,  629,  627,  887,  630,  890,  630,    0,  631,
      627,  631,    0,  891,  629,  631,  892,  894,  627,  630,
      629,    0,  631,  884,  632,  630,  886,  629,  632,  629,
      632,  887,  630,  890,  630,  633,  631,  632,  631,  632,
      891,  633,  631,  892,  894,  895,  635,  634,  633,  631,
      897,  632,  635,  634,  898,  632,  634,  632,  899,  635,

      634,    0,  633,  636,  632,  637,  632,  900,  633,  636,
        0,  637,  895,  635,  634,  633,  636,  897,  637,  635,
      634,  898,  638,  634,  902,  899,  635,  634,  638,    0,
      636,  639,  637,  903,  900,  638,  636,  639,  637,  638,
      904,  640,    0,  636,  639,  637,  640,  640,    0,  638,
      641,  902,  909,  910,  640,  638,  641,  975,  639,  980,
      903,    0,  638,  641,  639,  641,  638,  904,  640,  642,
        0,  639,  643,  640,  640,  642,    0,  641,  643,  909,
      910,  640,  642,  641,  975,  643,  980,  642,  645,    0,
      641,  644,  641,  644,  645,  981,  642,  644,    0,  643,

      647,  645,  642,  645,  644,  643,  647,  983,    0,  642,
      646,  985,  643,  647,  642,  645,  646,  986,  644,    0,
      644,  645,  981,  646,  644,  646,  648,  647,  645,  650,
      645,  644,  648,  647,  983,  650,  648,  646,  985,  648,
      647,  987,  650,  646,  986,  988,  649,  991,  649,    0,
      646,  650,  646,  648,  649,  993,  650,  996,  651,  648,
      651,  649,  650,  648,  651, 1000,  648, 1001,  987,  650,
      652,  651,  988,  649,  991,  649,  652, 1005,  650,    0,
      653,  649,  993,  652,  996,  651,  653,  651,  649,    0,
     1006,  651, 1000,  653, 1001,  653,  654,  652,  651, 1007,

        0,    0,  654,  652, 1005,    0,  655,  653, 1008,  654,
      652,  654,  655,  653,    0,  656,  656, 1006, 1009,  655,
      653,  656,  653,  654, 1052, 1054, 1007,  655,  656,  654,
        0,  658,  657,  655,  657, 1008,  654,  658,  654,  655,
      657,  658,  656,  656,  658, 1009,  655,  657,  656, 1057,
      660, 1052, 1054,    0,  655,  656,  660, 1055,  658,  657,
        0,  657, 1060,  660,  658,  660, 1061,  657,  658,  661,
      659,  658,  659, 1055,  657,  661, 1057,  660,  659, 1062,
      662,  662,  661,  660, 1055,  659,  661,  662, 1063, 1060,
      660, 1064,  660, 1061,  662,    0,  661,  659,  663,  659,

     1055,    0,  661, 1065,  663,  659, 1062,  662,  662,  661,
      664,  663,  659,  661,  662, 1063,  664, 1068, 1064, 1069,
      665,  662,  665,  664, 1070,  663,  665, 1090,  666,  667,
     1065,  663, 1091,  665,  666,  667,    0,  664,  663,  668,
      666,  666,  667,  664, 1068,  668, 1069,  665,    0,  665,
      664, 1070,  668,  665, 1090,  666,  667,  669,  672, 1091,
      665,  666,  667,  669,  672, 1092,  668,  666,  666,  667,
      669,  672,  668,  669,  670,  671,  672, 1093,  670,  668,
      670,  671, 1094,    0,  669,  672,  671,  670,  671,    0,
      669,  672, 1092,  673,    0,    0,    0,  669,  672,  673,

      669,  670,  671,  672, 1093,  670,  673,  670,  671, 1094,
      673,  675,  674,  671,  670,  671,  674,  675,  674,    0,
      673,  676,  677,  676,  675,  674,  673,  676,  677,  675,
        0,    0, 1100,  673,  676,  677,    0,  673,  675,  674,
      678,    0,    0,  674,  675,  674,  678, 1103,  676,  677,
      676,  675,  674,  678,  676,  677,  675,  679,  678, 1100,
     1118,  676,  677,  679, 1120,  681,  680,  678,  680,  765,
      679,  681,  680,  678, 1103,  765, 1121,  681,  681,  680,
      678, 1124,  765,    0,  679,  678,    0, 1118, 1132,    0,
      679, 1120,  681,  680, 1133,  680,  765,  679,  681,  680,

     1134,  766,  765, 1121,  681,  681,  680,  766, 1124,  765,
      767,  768,  766,  769,  766, 1132,  767,  768, 1140,  769,
        0, 1133, 1142,  767,  768, 1147,  769, 1134,  766, 1150,
     1152, 1154,    0,    0,  766,    0,  769,  767,  768,  766,
      769,  766,  770,  767,  768, 1140,  769,  770,  770, 1142,
      767,  768, 1147,  769,  771,  770, 1150, 1152, 1154,    0,
      771,    0,    0,  769,  772,  771,  772,  771,    0,  770,
      772,    0,  773,    0,  770,  770,    0,  772,  773,    0,
        0,  771,  770,    0,    0,  773,    0,  771,    0,    0,
        0,  772,  771,  772,  771,    0,  774,  772,  774,  773,

        0,    0,  774,    0,  772,  773,  775,  777,  775,  774,
        0,    0,  773,  777,  775,    0,    0,    0,  776,  776,
      777,  775,    0,  774,  776,  774,  778,    0,    0,  774,
        0,  776,  778,  775,  777,  775,  774,    0,    0,  778,
      777,  775,    0,  778,  779,  776,  776,  777,  775,    0,
      779,  776,    0,  778,  781,  779,  780,  779,  776,  778,
      781,    0,  780,    0,    0,    0,  778,  781,    0,  780,
      778,  779,  783,  780,  783,    0,    0,  779,  783,    0,
      782,  781,  779,  780,  779,  783,  782,  781,    0,  780,
        0,  784,    0,  782,  781,  782,  780,  784,    0,  783,

      780,  783,  787,  785,  784,  783,    0,  782,  787,  785,
        0,  787,  783,  782,  785,  787,  785,  786,  784,  786,
      782,    0,  782,    0,  784,  786,    0,    0,    0,  787,
      785,  784,  786,    0,  788,  787,  785,    0,  787,    0,
      788,  785,  787,  785,  786,    0,  786,  788,    0,  788,
      790,  789,  786,  789,    0,  790,  790,  789,    0,  786,
      791,  788,  797,  790,  789,    0,  791,  788,  797,    0,
        0,  791,    0,  791,  788,  797,  788,  790,  789,  792,
      789,  792,  790,  790,  789,  792,    0,  791,  794,  797,
      790,  789,  792,  791,  794,  797,    0,  793,  791,  793,

      791,  794,  797,  793,    0,  794,  792,  795,  792,    0,
      793,    0,  792,  795,    0,  794,  798,    0,    0,  792,
      795,  794,  798,  795,  793,  796,  793,    0,  794,  798,
      793,  796,  794,    0,  795,    0,    0,  793,  796,    0,
      795,  796,  799,  798,    0,    0,  799,  795,  799,  798,
      795,  800,  796,    0,    0,  799,  798,  800,  796,    0,
        0,  802,    0,  802,  800,  796,  801,  802,  796,  799,
      801,    0,  801,  799,  802,  799,    0,    0,  800,  801,
        0,    0,  799,  803,  800,    0,    0,    0,  802,  803,
      802,  800,    0,  801,  802,    0,  803,  801,  804,  801,

      804,  802,  806,    0,  804,  805,  801,  805,  806,    0,
      803,  804,    0,  805,    0,  806,  803,    0,    0,    0,
      805,    0,    0,  803,  807,  804,    0,  804,    0,  806,
      807,  804,  805,    0,  805,  806,    0,  807,  804,    0,
      805,  807,  806,  809,  808,  809,  808,  805,    0,  809,
        0,  807,  808,    0,    0,    0,  809,  807,    0,  808,
        0,  810,    0,    0,  807,    0,    0,  810,  807,  811,
      809,  808,  809,  808,  810,  811,  809,  810,  811,  808,
        0,    0,  811,  809,  812,  813,  808,    0,  810,    0,
      812,  813,    0,    0,  810,    0,  811,  812,  813,    0,

        0,  810,  811,    0,  810,  811,  814,  815,  814,  811,
        0,  812,  813,  815,  814,    0,  815,  812,  813,    0,
      815,  814,    0,  817,  812,  813,    0,    0,    0,  817,
        0,  818,  816,  814,  815,  814,  817,  818,  816,    0,
      815,  814,    0,  815,  818,  816,    0,  815,  814,  816,
      817,    0,  819,    0,  819,  820,  817,    0,  818,  816,
      819,  820,    0,  817,  818,  816,    0,  819,  820,    0,
      820,  818,  816,    0,    0,    0,  816,  821,  822,  819,
      823,  819,  820,  821,  822,    0,  823,  819,  820,    0,
      821,  822,    0,  823,  819,  820,  823,  820,    0,    0,

        0,    0,    0,  825,  821,  822,  824,  823,  824,  825,
      821,  822,  824,  823,    0,    0,  825,  821,  822,  824,
      823,    0,    0,  823,    0,  826,    0,  826,  827,    0,
      825,  826,    0,  824,  827,  824,  825,    0,  826,  824,
        0,  827,    0,  825,  827,    0,  824,  828,    0,  828,
      829,  830,  826,  828,  826,  827,  829,  830,  826,    0,
      828,  827,    0,  829,  830,  826,  831,  832,  827,  832,
        0,  827,  831,    0,  828,  832,  828,  829,  830,  831,
      828,    0,  832,  829,  830,    0,    0,  828,    0,    0,
      829,  830,  833,  831,  832,  834,  832,  835,  833,  831,

        0,  834,  832,  835,  833,  833,  831,    0,  834,  832,
      835,    0,  834,    0,  836,    0,    0,    0,    0,  833,
      836,    0,  834,    0,  835,  833,    0,  836,  834,  836,
      835,  833,  833,    0,  837,  834,  837,  835,  838,  834,
      838,  836,  837,    0,  838,    0,  839,  836,    0,  837,
        0,  838,  839,    0,  836,    0,  836,    0,    0,  839,
        0,  837,  840,  837,  840,  838,    0,  838,  840,  837,
        0,  838,    0,  839,    0,  840,  837,    0,  838,  839,
        0,  841,    0,  841,  842,    0,  839,  841,    0,  840,
      842,  840,    0,  843,  841,  840,    0,  842,    0,  843,

        0,    0,  840,  843,    0,    0,  843,    0,  841,  844,
      841,  842,    0,    0,  841,  844,    0,  842,    0,    0,
      843,  841,  844,    0,  842,  844,  843,    0,  846,  845,
      843,  845,  847,  843,  846,    0,  844,  845,  847,    0,
      911,  846,  844,    0,  845,  847,  911,    0,    0,  844,
      847,    0,  844,  911,    0,  846,  845,  913,  845,  847,
        0,  846,    0,  913,  845,  847,    0,  911,  846,    0,
      913,  845,  847,  911,    0,  914,  912,  847,  912,  915,
      911,  914,  912,    0,  913,  915,    0,  916,  914,  912,
      913,    0,  915,  916,    0,    0,    0,  913,  916,    0,

      916,    0,  914,  912,    0,  912,  915,    0,  914,  912,
        0,  917,  915,    0,  916,  914,  912,  917,    0,  915,
      916,    0,  917,    0,  917,  916,  918,  916,  918,  919,
      920,  919,  918,    0,  921,  919,  920,    0,  917,  918,
      921,    0,  919,  920,  917,    0,    0,  921,    0,  917,
        0,  917,    0,  918,    0,  918,  919,  920,  919,  918,
        0,  921,  919,  920,    0,  922,  918,  921,    0,  919,
      920,  922,    0,  923,  921,  923,  924,  925,  922,    0,
      926,  923,  924,  925,    0,    0,  926,    0,  923,  924,
      925,    0,  922,  926,  925,    0,  926,    0,  922,    0,

      923,    0,  923,  924,  925,  922,    0,  926,  923,  924,
      925,    0,  927,  926,    0,  923,  924,  925,  927,    0,
      926,  925,  928,  926,  928,  927,  928,  929,  930,  927,
      928,    0,    0,  929,  930,    0,    0,  928,    0,  927,
      929,  930,    0,    0,    0,  927,    0,    0,    0,  928,
        0,  928,  927,  928,  929,  930,  927,  928,    0,  931,
      929,  930,    0,  932,  928,  931,    0,  929,  930,  932,
        0,  933,  931,    0,  934,  935,  932,  933,    0,    0,
      934,  935,    0,    0,  933,    0,  931,  934,  935,    0,
      932,    0,  931,    0,    0,    0,  932,    0,  933,  931,

      936,  934,  935,  932,  933,    0,  936,  934,  935,    0,
      937,  933,    0,  936,  934,  935,  937,    0,  938,  939,
        0,  937,  940,  937,  938,  939,    0,  936,  940,  938,
        0,  938,  939,  936,    0,  940,    0,  937,    0,  941,
      936,  941,    0,  937,    0,  938,  939,  941,  937,  940,
      937,  938,  939,    0,  941,  940,  938,    0,  938,  939,
        0,    0,  940,  942,  942,    0,  941,    0,  941,  942,
        0,  943,  944,    0,  941,    0,  942,  943,  944,    0,
      943,  941,  945,  945,  943,  944,    0,  946,  945,    0,
      942,  942,    0,  946,    0,  945,  942,    0,  943,  944,

      946,    0,  946,  942,  943,  944,    0,  943,    0,  945,
      945,  943,  944,    0,  946,  945,    0,  947,  948,  947,
      946,    0,  945,  947,  948,    0,  949,  946,  950,  946,
      947,  948,  949,    0,  950,  949,  951,  950,    0,  949,
        0,  950,  951,    0,  947,  948,  947,    0,    0,  951,
      947,  948,    0,  949,  952,  950,    0,  947,  948,  949,
      952,  950,  949,  951,  950,    0,  949,  952,  950,  951,
        0,  953,  954,    0,    0,    0,  951,  953,  954,    0,
        0,  952,    0,    0,  953,  954,    0,  952,    0,  955,
      956,    0,    0,  953,  952,  955,  956,    0,  953,  954,

      955,    0,  955,  956,  953,  954,    0,    0,  958,    0,
      958,  953,  954,  957,  958,    0,  955,  956,  959,  957,
      953,  958,  955,  956,  959,    0,  957,  955,    0,  955,
      956,  959,    0,    0,  957,  958,  960,  958,  960,    0,
      957,  958,  960,    0,  961,  959,  957,    0,  958,  960,
      961,  959,    0,  957,  962,    0,    0,  961,  959,    0,
      962,  957,  963,  960,    0,  960,  964,  962,  963,  960,
        0,  961,  964,    0,    0,  963,  960,  961,    0,  964,
        0,  962,    0,  965,  961,  965,    0,  962,    0,  963,
      966,  965,    0,  964,  962,  963,  966,    0,  965,  964,

        0,  967,  963,  966,    0,    0,  964,  967,    0,  968,
      965,    0,  965,  969,  967,  968,  967,  966,  965,  969,
        0,    0,  968,  966,    0,  965,  969,    0,  967,    0,
      966,  970,  971,    0,  967,    0,  968,  970,  971,    0,
      969,  967,  968,  967,  970,  971,  969,    0,  972,  968,
      973,    0,    0,  969,  972,    0,  973,  972,  970,  971,
     1013,  972,    0,  973,  970,  971, 1013,  973,    0,    0,
        0,  970,  971, 1013,    0,  972, 1014,  973,    0, 1015,
        0,  972, 1014,  973,  972, 1015,    0, 1013,  972, 1014,
      973, 1014, 1015, 1013,  973, 1016,    0,    0, 1017,    0,

     1013, 1016,    0, 1014, 1017,    0, 1015, 1018, 1016, 1014,
        0, 1017, 1015, 1018,    0,    0, 1014,    0, 1014, 1015,
     1018,    0, 1016, 1020, 1019, 1017,    0,    0, 1016, 1020,
     1019, 1017,    0,    0, 1018, 1016, 1020, 1019, 1017,    0,
     1018, 1019, 1021,    0,    0,    0,    0, 1018, 1021,    0,
     1020, 1019, 1022,    0, 1022, 1021, 1020, 1019, 1022,    0,
        0, 1023,    0, 1020, 1019, 1022, 1021, 1023, 1019, 1021,
     1024, 1024,    0,    0, 1023, 1021,    0, 1024,    0, 1022,
        0, 1022, 1021,    0, 1024, 1022,    0,    0, 1023, 1025,
     1025,    0, 1022, 1026, 1023, 1025,    0, 1024, 1024, 1026,

        0, 1023, 1025,    0, 1024,    0, 1026,    0, 1027,    0,
     1026, 1024, 1028,    0, 1027,    0, 1025, 1025, 1028,    0,
     1026, 1027, 1025,    0,    0, 1028, 1026, 1027,    0, 1025,
     1029,    0,    0, 1026, 1030, 1027, 1029, 1026,    0, 1028,
     1030, 1027,    0, 1029,    0, 1028,    0, 1030, 1027, 1031,
        0, 1030, 1028,    0, 1027, 1031,    0, 1029, 1033, 1032,
     1034, 1030, 1031, 1029, 1033, 1032, 1034, 1030, 1032,    0,
     1029, 1033, 1032, 1034, 1030, 1035, 1031, 1036, 1030,    0,
        0, 1035, 1031, 1036,    0, 1033, 1032, 1034, 1035, 1031,
     1036, 1033, 1032, 1034,    0, 1032,    0,    0, 1033, 1032,

     1034, 1037, 1035, 1038, 1036, 1039, 1040, 1037, 1035, 1038,
     1036, 1039, 1040,    0, 1037, 1035, 1038, 1036, 1039, 1040,
        0,    0,    0,    0, 1039,    0,    0,    0, 1037, 1041,
     1038, 1042, 1039, 1040, 1037, 1041, 1038, 1042, 1039, 1040,
        0, 1037, 1041, 1038, 1042, 1039, 1040, 1043, 1044,    0,
        0, 1039,    0, 1043, 1044,    0, 1041,    0, 1042,    0,
     1043, 1044, 1041,    0, 1042, 1044, 1046,    0,    0, 1041,
     1045, 1042, 1046,    0, 1043, 1044, 1045, 1046, 1045, 1046,
     1043, 1044,    0, 1045,    0, 1047,    0, 1043, 1044,    0,
        0, 1047, 1044, 1046,    0, 1049, 1048, 1045, 1047, 1046,

     1047, 1049, 1048, 1045, 1046, 1045, 1046,    0, 1049, 1048,
     1045, 1050, 1047, 1048,    0,    0,    0, 1050, 1047,    0,
     1051,    0, 1049, 1048, 1050, 1047, 1051, 1047, 1049, 1048,
        0,    0,    0, 1051,    0, 1049, 1048, 1071, 1050, 1071,
     1048,    0, 1072, 1071, 1050,    0, 1073, 1051, 1072,    0,
     1071, 1050, 1073, 1051,    0, 1072,    0, 1073,    0, 1073,
     1051, 1074, 1074,    0, 1071,    0, 1071, 1074,    0, 1072,
     1071,    0,    0, 1073, 1074, 1072,    0, 1071, 1074, 1073,
        0,    0, 1072,    0, 1073, 1075, 1073, 1076, 1074, 1074,
        0, 1075,    0, 1076, 1074,    0, 1076, 1077, 1075,    0,

     1076, 1074, 1078, 1077,    0, 1074,    0,    0, 1078,    0,
     1077,    0, 1075,    0, 1076, 1078,    0,    0, 1075,    0,
     1076,    0,    0, 1076, 1077, 1075, 1079, 1076, 1079, 1078,
     1077,    0, 1079,    0, 1080, 1078, 1080, 1077, 1081, 1079,
     1080,    0, 1078,    0, 1081,    0,    0, 1080,    0,    0,
        0, 1081,    0, 1079,    0, 1079, 1082,    0,    0, 1079,
     1081, 1080, 1082, 1080,    0, 1081, 1079, 1080,    0, 1082,
        0, 1081,    0, 1082, 1080, 1083,    0, 1083, 1081, 1085,
     1084, 1083, 1084, 1082, 1086, 1085, 1084, 1081, 1083, 1082,
     1086,    0, 1085, 1084,    0,    0, 1082, 1086,    0,    0,

     1082,    0, 1083,    0, 1083,    0, 1085, 1084, 1083, 1084,
     1087, 1086, 1085, 1084,    0, 1083, 1087, 1086,    0, 1085,
     1084,    0, 1088, 1087, 1086, 1089, 1104, 1087, 1088,    0,
        0, 1089, 1104,    0, 1105, 1088, 1104, 1087, 1089, 1104,
     1105,    0,    0, 1087, 1088,    0,    0, 1105,    0, 1088,
     1087, 1105, 1089, 1104, 1087, 1088,    0,    0, 1089, 1104,
        0, 1105, 1088, 1104,    0, 1089, 1104, 1105, 1106, 1107,
     1106, 1088,    0,    0, 1105, 1107, 1106,    0, 1105, 1108,
     1109, 1108, 1107, 1106,    0, 1108, 1109,    0, 1110,    0,
        0,    0, 1108, 1109, 1110, 1106, 1107, 1106, 1111,    0,

        0, 1110, 1107, 1106, 1111,    0, 1108, 1109, 1108, 1107,
     1106, 1111, 1108, 1109,    0, 1110, 1112, 1113,    0, 1108,
     1109, 1110, 1112, 1113,    0, 1111, 1114, 1115, 1110, 1112,
     1113, 1111, 1114, 1115,    0, 1116,    0,    0, 1111, 1114,
     1115, 1116, 1114, 1112, 1113,    0,    0,    0, 1116, 1112,
     1113,    0, 1117, 1114, 1115,    0, 1112, 1113, 1117, 1114,
     1115,    0, 1116,    0, 1117, 1117, 1114, 1115, 1116, 1114,
     1125, 1126, 1125,    0,    0, 1116, 1125, 1126,    0, 1117,
     1128,    0,    0, 1125, 1126, 1117, 1128,    0, 1127, 1129,
     1128, 1117, 1117, 1128, 1127, 1129,    0, 1125, 1126, 1125,

        0, 1127, 1129, 1125, 1126, 1127, 1130, 1128,    0,    0,
     1125, 1126, 1130, 1128,    0, 1127, 1129, 1128,    0, 1130,
     1128, 1127, 1129,    0, 1131, 1136,    0,    0, 1127, 1129,
     1131, 1136, 1127, 1130,    0, 1131, 1136, 1131, 1136, 1130,
        0, 1137, 1138, 1137, 1138,    0, 1130, 1137, 1138,    0,
        0, 1131, 1136, 1139, 1137, 1138,    0, 1131, 1136, 1139,
        0,    0, 1131, 1136, 1131, 1136, 1139,    0, 1137, 1138,
     1137, 1138, 1143,    0, 1137, 1138,    0, 1144, 1143,    0,
     1139, 1137, 1138, 1144,    0, 1143, 1139,    0,    0, 1143,
     1144,    0,    0, 1139, 1148, 1145, 1149,    0,    0, 1143,

     1148, 1145, 1149,    0, 1144, 1143,    0, 1148, 1145, 1149,
     1144, 1145, 1143, 1149,    0,    0, 1143, 1144, 1151, 1155,
     1151, 1148, 1145, 1149,    0, 1155, 1151, 1148, 1145, 1149,
        0, 1153, 1155, 1151, 1148, 1145, 1149, 1153, 1145,    0,
     1149, 1153, 1157,    0, 1153, 1151, 1155, 1151, 1157,    0,
        0,    0, 1155, 1151,    0, 1157,    0,    0, 1153, 1155,
     1151,    0,    0,    0, 1153,    0,    0,    0, 1153, 1157,
        0, 1153,    0,    0,    0, 1157,    0,    0,    0,    0,
        0,    0, 1157, 1159, 1159, 1159, 1159, 1160,    0,    0,
     1160, 1161,    0, 1161, 1161, 1163,    0, 1163, 1163, 1164,

        0, 1164, 1164, 1165,    0, 1165, 1165, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2506 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2520 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 2807 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1159 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1158 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(CURRENT_TIMESTAMP)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(AUTOINCREMENT)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(CURRENT_DATE)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(CURRENT_TIME)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CONSTRAINT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DEFERRABLE)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(REFERENCES)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(EXCLUSIVE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(IMMEDIATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(INITIALLY)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(RECURSIVE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(SAVEPOINT)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CONFLICT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(DEFERRED)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(COLLATE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(FOREIGN)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(INDEXED)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(INSTEAD)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(NOTNULL)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(REINDEX)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(RELEASE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(REPLACE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(TRIGGER)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(WITHOUT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(ACTION)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(ATTACH)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(DETACH)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(IGNORE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(PRAGMA)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(REGEXP)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(VACUUM)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(ABORT)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(CHECK)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(MATCH)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(QUERY)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(RAISE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(BLOB)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(EACH)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(FAIL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(GLOB)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(TEMP)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(ROW)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 144:
#line 208 "flex_lexer.l"
case 145:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3631 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(singlequotedstring):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1159 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1159 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1158);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 238 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

