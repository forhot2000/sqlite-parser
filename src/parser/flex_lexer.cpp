#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 151
#define YY_END_OF_BUFFER 152
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1157] =
    {   0,
        0,    0,    0,    0,    2,    2,  152,  150,    4,    4,
      150,  150,  142,  150,  142,  142,  145,  142,  142,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  142,  151,    2,    2,    3,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    4,  137,    0,    0,  148,    1,
      145,  144,  143,  139,  138,  140,  147,  147,  147,  147,

      147,  147,  147,  127,  147,  147,  147,  147,  147,  128,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  129,  147,  147,  130,  131,  147,  147,
      147,  147,  147,  147,  147,  132,  147,  133,  134,  135,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  136,  147,  147,  147,  147,  147,  147,
      147,  147,    0,  141,    2,    2,    2,    2,    2,    2,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,  146,  143,  147,  147,  116,
      147,  117,  147,  147,  118,  119,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  120,  147,  147,  147,  147,  147,  147,  121,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      122,  147,  147,  123,  147,  147,  147,  147,  147,  147,
      124,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  125,  147,  147,  126,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      149,    0,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,   91,
      147,  147,   92,   93,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,   94,  147,  147,
      147,   95,   96,   97,  147,  147,  147,  147,  147,   98,
      147,  147,   99,  100,  101,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  102,  147,  103,  104,  105,
      147,  106,  147,  147,  147,  107,  147,  147,  147,  108,
      147,  147,  147,  147,  109,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  110,  111,
      112,  147,  147,  147,  147,  147,  147,  147,  147,  113,
      147,  114,  147,  115,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   70,
      147,   71,   72,  147,  147,  147,  147,   73,  147,  147,

      147,   74,  147,  147,  147,  147,  147,  147,   75,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,   76,  147,   77,  147,  147,  147,   78,  147,
       79,  147,  147,  147,  147,  147,   80,   81,  147,  147,
      147,   82,   83,  147,  147,   84,   85,  147,  147,  147,
      147,  147,  147,  147,  147,   86,  147,  147,  147,   87,
      147,  147,  147,   88,  147,  147,   89,  147,  147,  147,
       90,  147,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,   45,  147,   46,  147,   47,
      147,  147,  147,  147,   48,   49,  147,  147,   50,  147,
      147,  147,  147,   51,   52,  147,   53,   54,   55,  147,
       56,  147,  147,   57,   58,  147,  147,  147,   59,  147,
      147,  147,   60,  147,  147,   61,   62,  147,  147,  147,

       63,  147,  147,   64,  147,  147,  147,  147,   65,  147,
      147,  147,   66,   67,   68,   69,  147,  147,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   25,  147,   26,   27,   28,   29,  147,  147,  147,
      147,   30,  147,  147,  147,  147,   31,   32,  147,   33,

      147,   34,   35,  147,   36,   37,   38,  147,  147,   39,
       40,   41,  147,  147,  147,  147,  147,   42,   43,   44,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,  147,
       19,  147,  147,   20,  147,   21,   22,  147,  147,  147,
      147,  147,  147,   23,   24,  147,  147,  147,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,  147,  147,  147,

      147,  147,   12,   13,   14,   15,   16,  147,   17,   18,
      147,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,  147,    9,  147,  147,   10,
       11,  147,    2,    2,    2,    2,    2,    2,    2,  147,
      147,  147,    8,    2,    2,    2,    2,  147,    6,    7,
        2,    2,    2,    5,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    6,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    6,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1166] =
    {   0,
        0,    0,    0,    0,   67,    0,  493, 6516,  133,  135,
      478,    0, 6516,  479,  131,  468,  133,  132,  458,  131,
      134,  166,  184,  191,  206,  124,  126,  233,  123,  136,
      226,  143,  235,  243,  178,  127,  277,  270,  288,  271,
      197,  147,  431,    0,  367, 6516,    0,  168,  254,  337,
      340,    0,  201,  258,  332,  263,  270,  327,  346,  399,
      451,  503,  555,  607,  443,  459,  655,  495,  501,  553,
      598,  603,  706,  652,  543,  704,  751,  796,  836,  758,
      884,  717,  774,  271,  291, 6516,  330,  327, 6516, 6516,
      298,  321,  318, 6516, 6516, 6516,    0,  138,  218,  268,

      277,  395,  300,  297,  386,  388,  403,  397,  401,    0,
      398,  417,  511,  487,  408,  407,  779,  443,  446,  455,
      475,  490,  510,  514,  611,  523,  531,  536,  548,  554,
      556,  560,  560,    0,  598,  603,  825,  603,  623,  608,
      630,  664,  639,  637,  645,  651,  660,  670,    0,  677,
      670,  709,  717,  710,  707,  929,  721,  797,  708,  769,
      742,  797,  770,    0,  834,  797,  809,  837,  848,  858,
      848,  839,  234, 6516,    0,  318,    0,  230,  210,    0,
        0,  314,  216,  212,    0,    0,    0,  877,  892,  935,
      974,  941,  989, 1041,  995, 1018, 1039, 1088, 1072, 1095,

     1100, 1126, 1138, 1186, 1144, 1034, 1161, 1233, 1210, 1244,
     1192, 1258, 1287, 1292, 1302, 1347,  885, 1300, 1342, 1359,
     1087, 1388, 1396, 1397,  981, 1406, 1432, 1473, 1455, 1239,
     1454, 1496, 1512, 1508, 1527, 1551, 1553, 1556, 1598, 1407,
     1575, 1599, 1458, 1621, 1645, 1617, 1688, 1629, 1687, 1676,
     1726, 1733, 1744, 1745, 1755, 1791, 1780, 1799, 1790, 1802,
     1834, 1844, 1845, 1905,    0, 6516,  200,  878,  891,    0,
      901,    0,  932,  930,    0,    0,  948,  939,  943,  982,
      969,  993,  990, 1141, 1005, 1037,  999, 1055, 1061, 1073,
     1095, 1127, 1161, 1152, 1157, 1184, 1172, 1203, 1194, 1205,

     1209,    0, 1232, 1332, 1240, 1252, 1255, 1267, 1296, 1289,
     1301, 1317, 1306, 1343, 1340, 1352, 1356, 1345, 1364, 1556,
     1402, 1360, 1384,    0, 1408, 1424, 1442, 1446, 1451, 1452,
     1469, 1495, 1489, 1508, 1513, 1517, 1530, 1540, 1548, 1563,
     1573, 1569, 1608, 1611, 1611, 1634, 1643, 1643, 1636, 1666,
     1666,    0, 1679, 1681,    0, 1675, 1677, 1708, 1725, 1726,
     1736, 1829, 1750, 1738, 1761, 1765, 1767, 1777, 1822, 1793,
     6516,  194,    0,  150, 1899, 1903, 1904, 1921, 1922, 1940,
     1951, 1952, 1968, 1977, 1976, 1993, 1994, 2018, 2023, 2035,
     2040, 2064, 2072, 2076, 2084, 2123, 2118, 2126, 2149, 2167,

     2175, 2172, 2197, 2214, 2219, 2223, 2238, 2255, 2260, 2277,
     2267, 2285, 2313, 2314, 2331, 2330, 2342, 2367, 2378, 2368,
     2383, 2409, 2424, 2425, 2428, 2433, 2469, 2465, 2470, 2478,
     2479, 2517, 2520, 2525, 2535, 2563, 2564, 2567, 2579, 2595,
     2614, 2623, 2626, 2642, 2661, 2618, 2670, 2672, 2689, 2715,
     2718, 2719, 2737, 2756, 2765, 2767, 2782, 2793, 2791, 2810,
     2819, 2828, 2836, 2838, 2847, 2873, 2877, 2889, 2912, 2921,
     2930, 2931, 2956, 2959, 2960, 2979, 2975,    0, 3040, 1784,
     1836, 1837, 1838, 1832, 1855, 1850, 1844, 1854, 1886,    0,
     1904, 1913,    0,    0, 1910, 1922, 1949, 1964, 1962, 1995,

     2008, 2012, 2045, 2062, 2061, 2068, 2075,    0, 2095, 2092,
     2102,    0,    0,    0, 2102, 2117, 2115, 2120, 2145,    0,
     2127, 2146,    0,    0,    0, 2171, 2175, 2175, 2200, 2185,
     2215, 2211, 2220, 2238, 2293,    0, 2263,    0,    0,    0,
     2263,    0, 2289, 2296, 2315,    0, 2332, 2324, 2330,    0,
     2355, 2387, 2365, 2388,    0, 2378, 2387, 2411, 2462, 2482,
     2471, 2502, 2509, 2511, 2530, 2519, 2545, 2552, 2559,    0,
        0, 2567, 2582, 2606, 2612, 2648, 2673, 2661, 2682,    0,
     2669,    0, 2694, 2688, 2978, 3034, 3038, 3039, 3062, 3043,
     3086, 3088, 3087, 3104, 3116, 3132, 3141, 3140, 3142, 3170,

     3179, 3188, 3187, 3217, 3216, 3218, 3248, 3263, 3267, 3271,
     3272, 3302, 3317, 3318, 3320, 3328, 3343, 3359, 3367, 3369,
     3371, 3395, 3397, 3419, 3420, 3421, 3423, 3445, 3449, 3464,
     3467, 3468, 3490, 3486, 3512, 3509, 3528, 3531, 3563, 3574,
     3566, 3575, 3585, 3604, 3613, 3621, 3622, 3645, 3660, 3663,
     3682, 3692, 3691, 3701, 3717, 3729, 3740, 3748, 3745, 3771,
     3776, 3786, 3787, 3823, 3832, 3831, 3842, 3847, 3873, 3878,
     3870, 3888, 3896, 3914, 3924, 3932, 3933, 3971, 3956, 3968,
     3993, 4003, 4022, 4012, 4038, 4048, 4047, 4057, 4079,    0,
     2698,    0,    0, 2703, 2728, 2730, 2747,    0, 2761, 2788,

     2802,    0, 2791, 2816, 2823, 2852, 2855, 2879,    0, 2871,
     2898, 2892, 2890, 2938, 2980, 3003, 3021, 3040, 3038, 3042,
     3047, 3090,    0, 3093,    0, 3104, 3107, 3151, 3160, 3165,
        0, 3147, 3188, 3205, 3193, 3202,    0,    0, 3234, 3232,
     3230,    0,    0, 3254, 3240,    0,    0, 3254, 3281, 3273,
     3293, 3293, 3319, 3325, 3321,    0, 3341, 3350, 3346,    0,
     3363, 3381, 3383,    0, 3386, 3389,    0, 3406, 3423, 3444,
        0, 3439, 4076, 4094, 4095, 4098, 4117, 4136, 4145, 4146,
     4120, 4164, 4182, 4199, 4181, 4211, 4223, 4235, 4240, 4259,
     4258, 4270, 4282, 4306, 4305, 4321, 4324, 4360, 4329, 4368,

     4376, 4371, 4406, 4407, 4418, 4429, 4448, 4430, 4460, 4465,
     4476, 4484, 4501, 4502, 4506, 4532, 4547, 4548, 4573, 4556,
     4571, 4595, 4610, 4612, 4621, 4636, 4653, 4658, 4662, 4677,
     4681, 4699, 4703, 4725, 4707, 4735, 4753, 4757, 4761, 4779,
     4783, 4807, 4802, 4826, 4830, 4825, 4856, 4871, 4872, 4875,
     4880, 4903, 4925, 4921, 4922,    0, 3469,    0, 3475,    0,
     3472, 3482, 3509, 3519,    0,    0, 3524, 3529,    0, 3512,
     3519, 3523, 3645,    0,    0, 3550,    0,    0,    0, 3553,
        0, 3571, 3586,    0,    0, 3631, 3629, 3623,    0, 3640,
     3637, 3681,    0, 3675, 3677,    0,    0, 3677, 3730, 3726,

        0, 3731, 3766,    0, 3781, 3790, 3794, 3800,    0, 3809,
     3812, 3807,    0,    0,    0,    0, 3816, 3837, 4926, 4968,
     4951, 4963, 4973, 4998, 4999, 5014, 5015, 5040, 5045, 5050,
     5062, 5086, 5088, 5091, 5103, 5127, 5135, 5138, 5153, 5157,
     5176, 5179, 5181, 5198, 5207, 5217, 5226, 5229, 5248, 5264,
     5274, 5272, 5289, 5300, 5318, 5319, 5328, 5330, 5354, 5356,
     5371, 5372, 5395, 5397, 5413, 5423, 5432, 5441, 5442, 5451,
     5460, 5477, 5488, 5479, 5496, 5514, 5518, 5526, 5537, 5556,
     5555,    0, 3851,    0,    0,    0,    0, 3868, 3886,  113,
     3893,    0, 3908, 3907, 3899, 3912,    0,    0, 3935,    0,

     3946,    0,    0, 3961,    0,    0,    0, 3944, 3970,    0,
        0,    0, 3961, 3984, 3989, 4000, 4006,    0,    0,    0,
     5567, 5578, 5597, 5602, 5606, 5621, 5632, 5644, 5656, 5668,
     5660, 5679, 5698, 5703, 5715, 5727, 5739, 5751, 5750, 5776,
     5774, 5775, 5786, 5798, 5817, 5821, 5822, 5833, 5845, 5863,
     5864, 5875, 5874, 5899, 5916, 5900, 5928, 5946, 5947, 4027,
        0, 4020, 4358,    0, 4037,    0,    0, 4067, 4070, 4061,
     4085, 4160, 4163,    0,    0, 4154, 4152, 4197, 5963, 5951,
     5982, 5999, 5998, 6001, 6017, 6029, 6045, 6046, 6054, 6071,
     6089, 6099, 6100, 6108, 6117, 6125, 6136, 4196, 4193, 4218,

     4212, 4218,    0,    0,    0,    0,    0, 4226,    0,    0,
     4242, 6154, 6153, 6177, 6172, 6182, 6200, 6201, 6218, 6219,
     6223, 6248, 6247, 6249, 6265, 4255,    0, 4272, 4280,    0,
        0, 4285, 6266, 6284, 6296, 6308, 6319, 6320, 6331, 4314,
     4326, 4356,    0, 6343, 6355, 6372, 6367, 4355,    0,    0,
     6391, 6390, 6409,    0, 6413, 6516, 6469, 6475, 6481, 6483,
     6489, 6495, 6501, 6504, 6509
    } ;

static const flex_int16_t yy_def[1166] =
    {   0,
     1156,    1, 1157, 1157, 1156,    5, 1156, 1156, 1156, 1156,
     1156, 1158, 1156, 1159, 1156, 1156, 1156, 1156, 1156, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1156, 1156, 1161, 1161, 1156, 1161,
     1162, 1161, 1163, 1161, 1161, 1161, 1161, 1161, 1156,   59,
       60,   60,   60,   61,   60,   60,   63,   60,   60,   60,
       60,   61,   61,   73,   73,   62,   62,   62,   73,   62,
       62,   73,   73, 1161, 1156, 1156, 1158, 1159, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1164, 1156, 1161, 1161, 1161, 1162, 1163, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161,   73,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   73,   60,   60,

       60,   60,   60,   60,   60,   73,   73,   73,  208,   73,
       60,   60,  208,  208,  208,  208,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      208,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216, 1165, 1161, 1156, 1156, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1156, 1164, 1161, 1161,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  208,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
       60,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,   60,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,   73,  216, 1161, 1165, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216, 1160, 1160, 1160, 1160, 1160,
     1160, 1160,  216,  216,  216,  216,  216,  216,  216, 1160,
     1160, 1160, 1160,  216,  216,  216,  216, 1160, 1160, 1160,
      216,  216,  216, 1160,  216,    0, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156
    } ;

static const flex_int16_t yy_nxt[6584] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   13,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   44,    8,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   44,   45,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   52,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,

       79,   80,   81,   82,   83,   83,   47,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   83,   83,   84,   85,   85,   85,   85,   90,  133,
       91,   93,   91,   94,   95,   98,   99,  100,  131,  101,
      139,  107, 1063,  140,  132,  102,  144,  103,  108,  374,
      154,  109,  104,  105,  106,  268,  133,  171,  172,  176,
       85,  110,   98,   99,  100,  131,  101,  139,  107,  111,
      140,  132,  102,  144,  103,  108,  112,  154,  109,  104,
      105,  106,  268,  113,  171,  172,  114,  116,  110,  115,

      371,  117,  152,   88,  121,  118,  111,  180,  153,  267,
      169,  119,   88,  112,  120,  122,  180,  123,  170,  126,
      113,  374,  124,  114,  116,  183,  115,  125,  117,  152,
      127,  121,  118,  128,  373,  153,  129,  169,  119,  130,
      371,  120,  122,  141,  123,  170,  126,  142,  145,  124,
      269,  134,  135,  143,  125,   85,   85,  127,  136,  137,
      128,  148,  146,  129,  138,  181,  130,  182,  147,  149,
      141,  184,  182,  150,  142,  145,  151,  269,  134,  135,
      143,  185,  186,  159,  270,  136,  137,  160,  148,  146,
      155,  138,   85,   85,  156,  147,  149,  166,  157,  167,

      150,  161,  168,  151,  158,  162,   93,   91,  163,  271,
      159,  270,  276,  274,  160,  164,  275,  155,  165,  176,
       85,  156,  184,  182,  166,  157,  167,  267,  161,  168,
       92,  158,  162,   89,  266,  163,  271,  265,  187,  276,
      274,  183,  164,  275,  175,  165,  175,  175,  177,  175,
      175,  175,  175,  175,  175,  188,  175,  175,  175,  188,
      189,  190,  191,  188,  192,  188,  188,  188,  188,  188,
      193,  188,  194,  188,  188,  188,  188,  195,  196,  197,
      188,  188,  188,  188,  188,  188,  188,  189,  190,  191,
      188,  192,  188,  188,  188,  188,  188,  193,  188,  194,

      188,  188,  188,  188,  195,  196,  197,  188,  188,  188,
      188,  188,  175,  188,  188,  188,  198,  188,  277,  272,
      278,  279,  280,  199,  282,  188,  200,  273,  283,  284,
      188,  188,  188,  174,  285,  281,  201,  173,  291,  292,
      188,  188,  188,  198,  188,  277,  272,  278,  279,  280,
      199,  282,  188,  200,  273,  283,  284,  188,  188,  188,
      188,  285,  281,  201,  202,  291,  292,  222,  188,   96,
      188,  203,  224,  223,  297,  188,  188,   92,  204,  298,
      188,  205,  299,  188,  206,   89,  188,  188,  188,   86,
      300,  202, 1156, 1156,  222,  188,  188,  188,  203,  224,

      223,  297,  188,  188,  289,  204,  298,  188,  205,  299,
      188,  206,  188,  188,  290,  188,  207,  300,  231,  188,
      208,  301,  230,  188,  209,  188,  302,  188,  188,  303,
      210,  289,  188,  211, 1156,  286,  287,  288,  188,  188,
      188,  290, 1156,  207,  307,  231,  188,  208,  301,  230,
     1156,  209,  188,  302,  188,  188,  303,  210,  308,  188,
      211,  188,  286,  287,  288,  188,  309,  188,  212,  188,
      232,  307,  188,  188,  233,  310,  245,  188,  311,  213,
      234,  214,  188,  312, 1156,  308,  215,  313,  188, 1156,
      188,  216,  188,  309,  314,  212,  188,  232, 1156,  188,

      188,  233,  310,  245,  188,  311,  213,  234,  214,  188,
      312,  235, 1156,  215,  313,  188,  236,  188,  216,  188,
      217,  314,  188,  188,  315,  188,  304,  188,  316,  322,
      237,  218,  305,  188,  219,  188,  238,  220,  235,  306,
      221, 1156,  188,  236,  323,  324, 1156,  217,  325,  188,
      188,  315,  188,  304,  188,  316,  322,  237,  218,  305,
      188,  219,  188,  238,  220,  328,  306,  221,  188,  329,
      188,  323,  324,  225,  226,  325,  243,  330,  188,  188,
      227,  228,  244,  331,  332,  188,  229,  326,  333,  327,
     1156,  188,  328,  334, 1156,  188,  329,  188, 1156, 1156,

      225,  226,  335,  243,  330,  188,  188,  227,  228,  244,
      331,  332,  188,  229,  326,  333,  327,  246,  188,  188,
      334,  247,  336,  264,  239,  248,  188,  339,  340,  335,
      337,  249,  240,  188,  188,  188,  241, 1156,  338,  242,
      350, 1156,  353,  188,  246, 1156,  188,  188,  247,  336,
      188,  239,  248,  188,  339,  340,  356,  337,  249,  240,
      188,  188,  188,  241,  250,  338,  242,  350,  251,  353,
      188,  260,  188, 1156,  188,  188, 1156,  188,  188,  261,
     1156,  188, 1156,  356, 1156,  188, 1156,  359,  188, 1156,
     1156,  250,  188,  354, 1156,  251, 1156,  293,  260,  188,

      188,  355,  188,  294,  188,  188,  261,  188,  188,  252,
      295,  296,  188,  253,  359,  188,  254,  188,  362,  188,
      354,  351,  357,  255,  293,  363,  256,  188,  355, 1156,
      294,  188,  352,  358,  188, 1156,  252,  295,  296, 1156,
      253,  317, 1156,  254,  188,  362,  318,  360,  351,  357,
      255,  319,  363,  256,  188,  361,  320,  321,  364,  352,
      358, 1156,  257,  365,  258,  369,  188,  259,  317,  188,
     1156,  370,  366,  318,  360,  367, 1156, 1156,  319, 1156,
     1156,  188,  361,  320,  321,  364, 1156, 1156,  368,  257,
      365,  258,  369,  188,  259,  188,  188,  188,  370,  366,

      188,  188,  367,  188,  262,  263,  414,  188,  480,  188,
      188,  188,  481,  188,  188,  368,  188, 1156,  482,  375,
     1156, 1156,  188, 1156,  188, 1156, 1156,  188,  188,  188,
      188,  262,  263,  414,  188,  480,  188,  188,  188,  481,
      188,  188,  341,  188,  342,  482,  375,  343,  344,  483,
      345, 1156,  188,  346,  484,  347,  188,  348,  188,  188,
      349,  485,  188, 1156, 1156,  188,  486,  376,  188,  341,
      487,  342,  188,  378,  343,  344,  483,  345,  188,  188,
      346,  484,  347, 1156,  348,  188,  188,  349,  485,  188,
      377,  188,  188,  486,  376,  188,  188,  487,  188,  188,

      378,  188,  188,  488,  489,  188,  188,  490, 1156,  188,
      383,  188,  188,  379,  491, 1156,  188,  377,  188,  188,
      495,  380,  188,  188,  498,  188,  188, 1156,  188,  188,
      488,  489,  188,  188,  490,  188,  188,  383,  188,  188,
      379,  491,  188,  188, 1156,  188,  188,  495,  380,  188,
      384,  498,  188,  188,  381,  188,  188,  382,  188,  188,
      188,  496,  188,  188,  398,  188,  188,  188,  188,  188,
      497,  385,  188,  499,  501, 1156,  188,  384,  188,  188,
     1156,  381,  188,  188,  382,  188,  500,  188,  496,  188,
      188,  398,  188,  188,  188,  188,  188,  497,  385,  389,

      499,  501,  188,  188,  502,  188,  386,  387,  188,  188,
     1156,  418,  188,  500,  188,  188,  188,  188,  188,  188,
      388,  188,  390,  188,  188,  503,  389,  188, 1156,  188,
     1156,  502,  188,  386,  387,  188,  188,  188,  418,  188,
      504,  188,  188,  188,  188,  188,  188,  388,  188,  390,
      188,  188,  503,  188,  188,  392,  492,  391,  493,  188,
     1156,  396,  188,  188,  188,  188, 1156,  504,  188,  507,
      188,  397,  508,  494,  505,  188, 1156,  188,  506,  188,
      188,  188,  392,  492,  391,  493, 1156,  188,  396,  188,
      188,  188,  188,  399,  188,  188,  507,  509,  397,  508,

      494,  505,  188,  188,  510,  506,  188, 1156,  188,  188,
      393,  394,  395,  188,  188, 1156,  188,  511,  188,  406,
      399,  188,  512,  188,  509,  513,  514, 1156,  188,  188,
      188,  510, 1156, 1156,  188, 1156,  188,  393,  394,  395,
      188,  404,  188,  188,  511,  515,  406, 1156, 1156,  512,
      188,  400,  513,  514,  188,  188,  188,  401, 1156,  188,
      430,  188,  188,  188,  402,  403,  188,  188,  404,  188,
      188,  518,  515,  407,  188,  188,  519,  405,  400,  520,
      521,  188,  188, 1156,  401,  188,  188,  430, 1156,  188,
      188,  402,  403,  188,  188,  188, 1156,  188,  518, 1156,

      407,  188,  188,  519,  405,  188,  520,  521,  409,  188,
      188,  188,  188,  522,  523,  188,  188,  410,  408,  188,
      188,  188,  188,  188,  188,  524,  188,  415,  188, 1156,
     1156,  525,  188,  188,  188,  409, 1156,  188,  188,  526,
      522,  523,  188,  188,  410,  408,  188,  188,  188,  516,
      188,  188,  524,  188,  415,  188,  517,  188,  525, 1156,
      188,  188,  411,  188,  527,  188,  526,  528,  412,  529,
      188,  188,  416,  530,  188,  413,  516,  531,  188,  188,
      188,  532, 1156,  517,  188, 1156,  417,  188, 1156,  411,
      188,  527,  188,  537,  528,  412,  529,  188,  188,  416,

      530,  188,  413,  188,  531,  188,  188,  188,  532,  188,
      538,  188,  188,  417,  188,  419,  188,  188,  188,  535,
      537,  188,  188,  420,  188,  188, 1156,  188,  188,  536,
      188,  421,  422, 1156,  188,  188,  188,  538,  188,  188,
      539,  540,  419,  188,  188,  188,  535,  188,  188,  188,
      420,  188,  188,  188,  188,  188,  536,  423,  421,  422,
      188,  188,  188,  541, 1156,  542,  543,  539,  540,  188,
      188,  443, 1156,  188,  188,  188,  188, 1156, 1156,  188,
      188,  429,  188,  188,  423,  544,  188,  188,  188,  424,
      541,  431,  542,  543,  425,  545,  188,  188,  443,  426,

      188,  188,  188,  188,  427,  428,  188, 1156,  429,  188,
      188,  188,  544,  188,  432,  188,  424,  188,  431,  546,
      547,  425,  545,  188,  188,  548,  426,  188,  188,  188,
      549,  427,  428,  188,  435,  433,  188,  434,  188, 1156,
      188,  432,  188,  550,  188, 1156,  546,  547,  188,  551,
      188,  188,  548, 1156,  188,  188,  188,  549, 1156,  436,
      188,  435,  433,  188,  434,  552,  188,  188,  188,  188,
      550,  188,  188,  533,  188,  188,  551,  188,  553,  188,
      439,  188,  188,  437,  188,  438,  436, 1156,  534, 1156,
      188,  441,  552,  188,  554,  188,  188,  555,  188,  188,

      533,  188,  556,  188,  188,  553,  188,  439,  188, 1156,
      437,  188,  438,  188,  188,  534,  440,  188,  441,  188,
      188,  554, 1156,  188,  555,  557,  188,  188,  558,  556,
      188,  442,  188, 1156,  444, 1156,  188,  559,  447, 1156,
      188,  188,  445,  440,  188,  188,  188,  188,  457,  188,
      188,  560,  557,  188,  188,  558,  561,  188,  442,  188,
      188,  444,  446,  188,  559,  447,  188,  562,  563,  445,
     1156,  188,  188,  188, 1156,  457,  188,  188,  560, 1156,
     1156, 1156, 1156,  561,  188, 1156,  564,  188, 1156,  446,
      565,  188, 1156,  188,  562,  563,  566,  188,  567,  568,

      188,  448,  188,  449,  188,  569,  450,  451,  188,  452,
      460,  458,  453,  564,  454,  188,  455,  565,  188,  456,
     1156, 1156,  459,  566,  188,  567,  568, 1156,  448,  188,
      449,  188,  569,  450,  451,  188,  452,  460,  458,  453,
      570,  454,  188,  455,  188, 1156,  456,  463,  188,  459,
      461,  571,  572, 1156,  188,  573, 1156,  188,  462,  188,
      188,  188,  466,  576,  577,  188,  188,  570, 1156,  464,
      188,  188,  188,  188,  463,  188,  188,  461,  571,  572,
      465,  188,  573,  188,  188,  462,  188,  188,  188,  466,
      576,  577,  188,  188,  578,  188,  464,  188,  579,  188,

      188,  469,  580,  188,  467,  188,  188,  465,  188,  581,
      188,  471,  468,  584,  188,  470,  690,  472,  188,  188,
      188,  578,  188,  188, 1156,  579,  473,  188,  469,  580,
      188,  467,  188,  188, 1156,  188,  581, 1156,  471,  468,
      584,  188,  470,  690,  472,  188,  188,  188,  582,  188,
      188,  474,  583,  473,  188,  188,  574,  188,  575,  188,
      188,  476,  188,  691,  475,  188,  188,  692,  693,  694,
      695,  696,  188,  188,  697,  582,  188,  477,  474,  583,
      698, 1156,  188,  574, 1156,  575,  188,  188,  476,  188,
      691,  475,  188,  188,  692,  693,  694,  695,  696,  188,

      188,  697, 1156,  699,  477,  175,  175,  698,  175,  175,
      175,  478,  175,  175,  188,  175,  175,  175,  188,  188,
      188,  700, 1156, 1156,  586,  188,  701,  188, 1156,  585,
      699,  188,  188,  702, 1156,  703,  188,  188,  587, 1156,
     1156,  188,  188,  188,  175,  188,  188,  188,  700,  188,
      188,  586,  188,  701,  188,  188,  585,  588,  188,  188,
      702,  188,  703,  188,  188,  587,  188,  188,  188,  188,
      188,  175,  188,  188,  704,  589,  188,  188, 1156,  188,
      188, 1156,  188,  188,  588,  705,  706, 1156,  188,  188,
      590,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      188,  704,  589,  591,  188,  188,  188,  188,  188,  188,
      188, 1156,  705,  706,  188,  593,  188,  590,  188,  188,
      592,  188,  188,  188,  188,  188, 1156,  707, 1156, 1156,
      591,  188,  188,  188, 1156,  188,  188,  595,  188,  188,
      708,  188,  593,  709,  188, 1156,  188,  592,  188,  188,
      188,  188, 1156,  594,  707,  597,  188,  598, 1156,  596,
      188,  188,  710,  188,  595,  188,  188,  708,  188, 1156,
      709,  188,  599,  188, 1156, 1156,  711,  188,  188,  600,
      594, 1156,  597,  188,  598,  188,  596,  188,  188,  710,
      188,  188,  188,  188,  712,  188,  601,  188,  713,  599,

      188,  603,  604,  711,  188,  602,  600,  714,  188, 1156,
      715, 1156,  188,  716,  188,  605,  188, 1156,  188,  188,
      188,  712, 1156,  601,  188,  713,  717,  188,  603,  604,
      718,  188,  602,  188,  714,  188,  606,  715,  188,  188,
      716,  188,  605,  188,  188,  719,  188,  188,  720,  607,
     1156,  188,  721,  717,  188, 1156,  608,  718,  722,  723,
      188, 1156,  609,  606,  188,  188,  188,  724,  188, 1156,
      188,  188,  719,  188,  188,  720,  607,  188,  188,  721,
      610,  188,  188,  608,  611,  722,  723,  613,  188,  609,
      188,  188,  612,  188,  724,  188,  188,  188, 1156,  725,

      188,  726, 1156,  188,  188,  727, 1156,  610, 1156,  188,
      614,  611,  188, 1156,  613,  188,  728,  188,  188,  612,
      188,  729,  188,  188, 1156,  188,  725,  188,  726,  188,
      188, 1156,  727,  616,  188,  188,  730,  614,  188,  188,
      188,  731,  188,  728,  188,  188,  615,  188,  729, 1156,
      732,  617,  188,  188, 1156,  733,  188, 1156,  618,  188,
      616,  188,  188,  730, 1156,  188,  188,  188,  731,  188,
      188,  188,  619,  615,  188,  188,  188,  732,  617, 1156,
      188,  188,  733,  188,  621,  618,  188,  736,  188, 1156,
      620,  622,  188,  188,  188,  737, 1156,  188,  188,  619,

      188, 1156,  188,  188,  188,  188,  188, 1156,  188,  738,
      188,  621,  734,  188,  736,  188,  623,  620,  622,  188,
     1156,  188,  737,  735, 1156,  188,  739,  188,  188,  188,
     1156,  188,  188,  188,  188,  188,  738,  624,  625,  734,
      188,  188,  188,  623,  626,  188,  188,  627,  740,  741,
      735,  188,  188,  739,  742,  188,  188,  188,  188,  188,
      743,  188,  188,  188,  624,  625, 1156,  628,  188,  188,
      188,  626,  188,  188,  627,  740,  741, 1156,  188,  188,
      744,  742,  188,  188,  188,  188,  188,  743,  188,  188,
      188,  629,  630,  188,  628,  188,  188,  188,  188,  188,

      745,  631,  746, 1156,  632,  747,  188,  744,  748,  188,
      188,  188, 1156, 1156, 1156,  188,  188,  749,  629,  630,
      188, 1156,  188,  188,  188,  188,  188,  745,  631,  746,
      188,  632,  747,  188, 1156,  748,  633,  188,  188,  188,
      188,  634,  635,  188,  749,  188,  188,  750,  188,  188,
      637,  188,  188,  188,  188, 1156,  188,  188, 1156, 1156,
      636,  188, 1156,  633,  188, 1156,  188,  188,  634,  635,
      188, 1156,  188,  188,  750,  188,  188,  637,  751,  188,
      188,  188,  640,  188,  188,  188,  638,  636,  188,  188,
      188,  188,  641,  188,  188,  752,  753,  188,  188,  188,

      188,  639,  188,  642,  643,  751,  188,  188, 1156,  640,
     1156,  188,  188,  638, 1156,  754,  188,  188,  188,  641,
      188,  188,  752,  753,  188,  188,  188,  188,  639,  188,
      642,  643,  188,  188,  188,  188, 1156,  645,  188,  755,
      188,  188,  754,  756,  757,  188,  646,  758,  188,  644,
      188, 1156, 1156,  188,  647, 1156,  188, 1156, 1156,  188,
      759, 1156,  188,  188,  645,  188,  755,  188,  188,  760,
      756,  757,  188,  646,  758,  188,  644,  188,  648,  188,
      188,  647,  188,  188,  188,  188,  761,  759,  188, 1156,
      188,  188,  188,  650,  188,  188,  760,  649,  762, 1156,

      188,  763, 1156,  651, 1156,  648,  188,  188, 1156,  188,
      188,  188,  188,  761, 1156,  188,  188, 1156,  188,  188,
      650,  188,  188,  188,  649,  762,  652,  188,  763,  188,
      651,  653,  764,  188,  188,  188, 1156,  188,  188,  188,
      654,  188,  188,  188,  188,  765,  188,  188,  658, 1156,
      188,  188,  655,  652,  188, 1156,  188,  188,  653,  764,
      188,  656,  188,  188, 1156,  188,  188,  654,  188,  188,
      188,  188,  765,  188,  188,  658,  188, 1156,  188,  655,
      766,  188,  188, 1156,  188,  188,  657,  188,  656,  188,
      188,  188,  767,  188,  768, 1156,  660,  188,  188,  769,

      188,  659,  770,  188,  188, 1156, 1156,  766, 1156,  188,
      188,  771,  188,  657,  188,  772,  188,  188,  188,  767,
      188,  768,  661,  660,  856,  188,  769,  188,  659,  770,
      188,  188,  662,  188,  188,  663,  188,  188,  771,  188,
      188,  857,  772,  188,  188,  664,  188,  188,  858,  661,
     1156,  856,  188, 1156,  665, 1156,  859,  188,  188,  662,
      188,  188,  663,  188,  860,  188,  188,  188,  857,  666,
      188,  188,  664,  188,  188,  858, 1156,  188,  861,  188,
      188,  665,  188,  859,  188,  188,  188, 1156,  188,  667,
     1156,  860,  188,  188, 1156,  188,  666,  188,  188,  668,

     1156,  862,  669,  188,  188,  861,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  667,  670,  863,  188,
      188,  188,  188,  864,  188,  188,  668,  671,  862,  669,
      188,  188, 1156,  188,  188,  188,  672,  188,  188,  188,
      188,  188,  865,  188,  670,  863,  188,  188,  188,  188,
      864,  188,  188,  188,  671,  866,  188,  188,  188,  188,
      673,  188,  188,  672,  188,  188,  674,  188,  188,  865,
      188, 1156, 1156,  867,  188,  188,  188, 1156,  188,  675,
      188, 1156,  866,  188,  188,  868,  188,  673,  188,  188,
     1156,  188,  188,  674,  188,  188,  869,  870,  188,  676,

      867,  188,  188,  677,  188,  188,  675, 1156,  678, 1156,
      188,  871,  868, 1156, 1156,  188,  872,  188, 1156,  188,
      873,  188, 1156,  869,  870,  188,  676,  188,  188, 1156,
      677,  188,  188,  188,  681,  678,  188,  188,  871,  679,
      188,  680,  188,  872,  188,  188,  188,  873, 1156,  188,
     1156,  188,  188, 1156,  188,  874,  682, 1156,  188,  188,
      188,  681, 1156,  188,  683, 1156,  679,  188,  680,  188,
     1156,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  874,  682,  188,  188,  188,  188,  188,  684,
      188,  683,  686,  188,  685,  689,  188,  188,  188,  188,

      875,  188,  188,  188,  188,  687,  188,  188,  188,  688,
      773,  188,  188, 1156,  188,  188,  684,  188, 1156,  686,
      188,  685,  689,  188,  188, 1156,  188,  875, 1156,  876,
      188, 1156,  687,  188, 1156, 1156,  688,  773,  877,  188,
      175,  175, 1156,  175,  175,  175,  478,  175,  175,  188,
      175,  175,  175,  188,  188,  188,  876,  878,  778,  188,
      188,  774,  188, 1156,  188,  877,  188,  188,  775,  776,
      879,  188, 1156,  880, 1156, 1156,  188,  188,  881,  175,
      188,  188,  188,  188,  878,  778,  188,  188,  774,  188,
      188,  188, 1156,  188,  188,  775,  776,  879,  188,  777,

      880,  188,  188,  188,  188,  881,  175,  779,  188,  188,
      188,  882,  883,  781,  188,  188,  188,  188,  780,  188,
     1156,  782, 1156,  884,  885,  188,  777, 1156,  188,  188,
      188,  188,  188, 1156,  779,  188,  188,  188,  882,  883,
      781,  188,  188,  188,  188,  780,  188,  188,  782,  783,
      884,  885,  188,  188,  784,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188, 1156, 1156, 1156,  188,  188,
      188,  188,  886, 1156,  188, 1156,  783,  887,  888,  889,
      188,  784,  188,  188,  188,  188, 1156,  188,  188,  188,
      188,  188,  786,  785,  188,  188,  188,  188,  188,  886,

      188,  890,  188,  188,  887,  888,  889,  188,  788,  188,
     1156, 1156,  188,  787, 1156,  188,  188, 1156,  188,  786,
      785,  188,  891, 1156,  892,  188,  893,  188,  890,  188,
      188,  188,  188,  188,  188,  788,  188,  188,  188,  188,
      787,  789,  188,  188,  188,  188,  188,  894,  790,  891,
      791,  892, 1156,  893, 1156, 1156,  895, 1156,  188,  188,
      188, 1156,  896,  188,  188,  188,  188,  897,  789,  188,
      898,  188,  188,  188,  894,  790,  188,  791,  188,  792,
      793,  794,  188,  895,  188,  899,  188,  188,  188,  896,
      188,  188,  188,  188,  897,  188,  188,  898,  900,  188,

      188,  901,  796,  188,  795,  188,  792,  793,  794,  188,
      902,  188,  899,  188,  188,  188, 1156,  188,  188,  188,
      188, 1156,  188,  188,  903,  900,  188,  188,  901,  796,
      188,  795,  188,  798,  797,  188,  904,  902,  188,  188,
      905,  799,  906,  188,  188,  188,  188, 1156,  188,  188,
      188,  903,  800, 1156,  907, 1156,  188,  188,  188,  188,
      798,  797,  188,  904,  188,  188,  188,  905,  799,  906,
      188,  188,  188,  188,  188,  188,  188,  908,  909,  800,
      188,  907,  188,  188,  188,  188,  188,  188,  188, 1156,
      188,  188,  188,  910,  911,  188, 1156,  801,  188,  802,

      912,  188, 1156,  913,  908,  909,  914,  188, 1156,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      910,  911,  188,  188,  801,  188,  802,  912,  803,  804,
      913,  915,  805,  914,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  807,  188, 1156,  188,  188,  188,
      188,  188,  188,  806,  916,  803,  804,  917,  915,  805,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  807,  918,  188,  188,  188,  188,  188,  188,  188,
      806,  916,  188,  188,  917,  188,  982,  188,  188,  188,
      983,  188,  188,  188,  809,  808,  188,  188,  984,  918,

      188,  188,  811, 1156,  188,  188,  188,  188,  985,  188,
      188,  188,  188,  982,  188,  188,  188,  983,  188,  188,
      810,  809,  808,  188,  188,  984,  986,  188,  188,  811,
      813, 1156,  188,  188,  188,  985,  987,  188,  188,  988,
      188,  188,  989,  188,  990,  188,  188,  810,  812,  188,
      991,  188,  188,  986,  188,  992,  188,  813,  814,  188,
      188,  815, 1156,  987,  188,  995,  988,  188, 1156,  989,
      188,  990, 1156,  188,  996,  812,  188,  991,  188,  188,
      816,  188,  992,  188,  188,  814,  188,  188,  815,  188,
      188,  188,  995,  817,  188,  188,  188,  997, 1156,  819,

      188,  996,  188,  188,  818,  188,  188,  816,  188, 1156,
     1156,  188,  998,  188,  188, 1156,  188,  188,  188,  188,
      817,  188,  188,  188,  997,  188,  819,  188,  188,  188,
      188,  818,  188,  188,  188, 1156,  188,  188, 1156,  998,
      188,  188,  188,  188,  999, 1000,  188, 1001, 1156,  188,
      188, 1156,  188,  820, 1156,  188, 1002, 1156,  993,  188,
      188,  188,  994,  188,  188,  821,  188, 1003,  188,  188,
      188,  999, 1000,  188, 1001,  188,  188,  188,  188, 1156,
      820,  188, 1156, 1002,  188,  993, 1156,  188,  188,  994,
      822,  188,  821,  188, 1003, 1156,  823,  188, 1004, 1005,

      188, 1006,  188,  188, 1156,  188,  188,  188,  188,  824,
      188,  188,  188,  188, 1007,  188,  188,  822,  188,  188,
      188,  825,  188,  823,  188, 1004, 1005, 1156, 1006,  188,
      188,  826,  188,  188,  188, 1156,  824,  188,  188,  188,
      188, 1007, 1156,  188,  188,  188,  188,  188,  825,  188,
      188, 1008, 1009,  828,  827,  188,  188,  188,  826,  188,
      188,  188,  830,  188, 1156,  188,  188, 1010,  188,  188,
     1156,  188,  188,  188, 1156, 1156,  188,  188, 1008, 1009,
      828,  827,  188, 1011,  188,  829,  188,  188,  188,  830,
      188,  188,  188,  188, 1010,  188,  188,  188, 1012,  188,

      188,  188,  188,  188,  188, 1013,  831,  188,  188, 1014,
     1011, 1156,  829,  188,  188,  188,  832, 1156,  188,  188,
     1156, 1015, 1016,  833,  188, 1012,  188, 1017,  188,  188,
     1156,  188, 1013,  831,  188,  188, 1014, 1018,  188,  834,
     1019,  188,  188,  832,  188,  835,  188,  188, 1015, 1016,
      833,  188,  188,  188, 1017,  837,  836,  188, 1156,  188,
      188, 1156,  188,  188, 1018,  188,  834, 1019,  188, 1020,
      188,  188,  835,  188,  188,  188, 1156,  838,  188,  188,
      188, 1060,  837,  836,  188,  188,  188,  188,  188,  188,
      188,  188,  840,  188,  188,  188, 1020,  188,  841,  188,

     1061,  188,  188,  842,  838,  839,  188, 1062, 1060,  188,
     1064,  188,  188,  843, 1156,  188,  188,  188,  188,  840,
      188,  188, 1065, 1066,  188,  841,  188, 1061,  188,  188,
      842, 1067,  839,  188, 1062,  188,  188, 1064,  188,  188,
      843,  844,  188,  188,  188,  188, 1068,  188,  188, 1065,
     1066,  188,  188,  188,  188, 1156,  188, 1156, 1067, 1156,
      188,  188,  188, 1156,  845, 1156,  188, 1069,  844,  188,
     1070,  188,  188, 1068,  188,  188, 1071,  188, 1072,  188,
      188,  188,  847,  188,  188, 1073,  188,  188,  188,  188,
      846,  845,  188, 1074, 1069, 1156,  188, 1070,  188,  188,

     1156,  848, 1156, 1071,  188, 1072, 1156, 1075,  188,  847,
      188,  188, 1073,  188,  188, 1076,  188,  846,  188,  188,
     1074,  188,  850,  188,  188,  849,  188,  188,  848,  852,
     1077,  188, 1156,  188, 1075,  188, 1156,  188, 1078, 1156,
      188,  188, 1076,  188, 1098,  188, 1099, 1156,  188,  850,
      188,  188,  849,  188,  188,  851,  852, 1077,  188,  188,
      188, 1102,  188,  188,  188, 1078,  188,  188,  188,  188,
      188, 1098,  188, 1099,  854,  188,  188,  188,  188, 1156,
      188,  853,  851, 1156, 1103,  188,  188, 1104, 1102,  188,
      188,  188, 1156,  188,  188,  188,  188,  188, 1105,  188,

      188,  854,  188,  188,  188,  188,  855,  188,  853,  188,
      188, 1103,  188,  188, 1104,  188,  188, 1106,  188,  188,
      919,  188,  188,  188,  188, 1105,  188,  188, 1156, 1156,
     1156,  188,  188,  855,  188,  188,  188,  188,  188, 1156,
      188,  188,  188,  188, 1106,  188,  188,  919,  188,  188,
      188,  188, 1156,  188, 1156,  920,  921,  188, 1156,  188,
      188,  188,  188,  923,  188,  188,  188,  188,  188, 1156,
     1156,  922,  188,  188,  188,  188, 1156, 1107,  188,  188,
     1108,  924,  920,  921,  188,  188, 1109,  188,  188, 1110,
      923,  188,  188,  188,  188,  925,  188,  188,  922, 1156,

      188,  188,  188,  188, 1107, 1156,  188, 1108,  924,  188,
      188, 1156,  188, 1109,  188,  926, 1110, 1156, 1111,  188,
      188, 1126,  925,  188,  188, 1127,  188,  188, 1156,  188,
      188, 1128,  188, 1129, 1156, 1130,  188,  188,  188,  188,
     1156,  188,  926,  927,  188, 1111, 1156,  188, 1126,  928,
      188,  188, 1127,  188,  188,  188,  188, 1131, 1128,  188,
     1129,  930, 1130,  188, 1156,  188,  188,  929,  188, 1132,
      927,  188, 1140,  188,  188,  932,  928,  188,  188,  188,
      188, 1156,  188,  188, 1131,  188,  188,  188,  930,  931,
      188,  188, 1156, 1156,  929,  188, 1132,  188,  188, 1140,

      188,  188,  932,  188, 1141, 1142,  188,  188,  933, 1156,
      188, 1143,  188,  188,  188, 1156,  931, 1156,  188,  934,
      188,  188, 1156, 1156,  188,  188,  188,  188, 1156,  935,
      188, 1141, 1142,  188,  188,  933,  188,  188, 1143,  188,
     1148,  937,  188, 1149,  188,  188,  934,  188,  188,  188,
      188,  936,  188,  188,  188,  939,  935,  188, 1156, 1156,
      188,  188, 1156,  188, 1156, 1156,  188, 1148,  937,  188,
     1149,  188,  188, 1150, 1100,  188,  188,  188,  936,  188,
      938,  188,  939,  188,  188,  940,  188, 1154,  188,  188,
     1101,  188,  188,  941, 1156, 1156,  188,  188, 1156,  188,

     1150, 1100,  188,  942,  188, 1156, 1156,  938,  188, 1156,
      188, 1156,  940,  188, 1154,  188,  188, 1101,  188,  188,
      941,  188,  188,  188,  188, 1156,  188,  188,  188, 1156,
      942,  188, 1156,  188,  188,  188, 1156,  943,  944,  945,
     1156, 1156, 1156, 1156,  188,  188,  188, 1156,  188,  188,
      188,  188, 1156, 1156,  188,  188, 1156,  188,  188, 1156,
      188,  188,  188,  188,  943,  944,  945,  946, 1156,  188,
     1156,  188,  188,  188, 1156,  188,  188,  188,  188,  947,
      188,  188,  948, 1156,  188,  188,  188, 1156,  188, 1156,
      188,  188, 1156,  188,  946, 1156,  188,  949, 1156,  188,

     1156,  950,  188,  188,  188,  188,  947,  188,  188,  948,
     1156, 1156,  188,  188,  951,  188,  188,  188,  188, 1156,
      188,  188,  188,  188,  949, 1156,  188,  188,  950,  188,
      188,  188,  188, 1156,  188, 1156, 1156, 1156,  952,  188,
     1156,  951, 1156,  188,  188,  953, 1156,  188,  188,  188,
      188, 1156, 1156,  188,  188, 1156,  188,  188, 1156, 1156,
      188,  188,  188,  188,  954,  952, 1156, 1156,  188,  188,
     1156,  188,  953, 1156,  188,  188,  188,  188, 1156,  955,
      188, 1156, 1156, 1156,  188, 1156,  188,  188,  188,  188,
      188,  954,  188, 1156,  188,  188,  188,  956,  188,  188,

     1156,  188,  188,  188,  188, 1156,  955, 1156,  957, 1156,
      188,  188, 1156,  188, 1156,  188,  188, 1156, 1156,  188,
     1156,  188, 1156,  188,  956,  188,  188,  188,  188, 1156,
     1156,  188, 1156,  188,  958,  957,  188,  188,  188, 1156,
      188, 1156,  188,  188,  959, 1156, 1156, 1156, 1156,  188,
      188,  188,  188, 1156,  188, 1156, 1156,  188,  188, 1156,
      188,  958, 1156,  188,  188,  188,  960,  188,  188,  188,
     1156,  959, 1156,  188,  188, 1156,  188,  188,  188,  188,
     1156,  188, 1156,  188,  188, 1156,  188, 1156,  961, 1156,
      188,  188,  188,  960, 1156,  188,  188, 1156,  188, 1156,

      188,  188,  188, 1156,  188,  188,  188, 1156,  188,  188,
      188, 1156,  962,  188,  188,  961,  963,  188,  188,  188,
      188, 1156,  188,  188,  188,  188, 1156,  188,  188,  188,
     1156,  964,  188, 1156, 1156,  188,  188, 1156,  966,  962,
      188,  188,  965,  963, 1156,  188,  188,  188, 1156,  188,
      188,  188,  967,  188,  188,  188,  188, 1156,  964, 1156,
     1156, 1156,  188,  188, 1156,  966, 1156,  188,  968,  965,
     1156, 1156,  188,  188,  188, 1156,  188,  188,  969,  967,
      188,  188,  188,  188, 1156,  188, 1156, 1156, 1156,  188,
      188, 1156,  970, 1156,  188,  968, 1156, 1156,  188,  188,

      188,  188, 1156,  188,  188,  969, 1156,  188,  188,  188,
      971,  188,  188, 1156, 1156, 1156,  188,  188, 1156,  970,
     1156,  188,  188,  188, 1156,  188, 1156,  188,  188, 1156,
      188,  188, 1156, 1156,  188,  188, 1156,  971,  188,  972,
      188,  188,  975,  974,  188,  188,  188,  188, 1156,  188,
      188,  188, 1156,  188,  188,  188,  973,  188,  188, 1156,
     1156, 1156,  188, 1156, 1156, 1156,  972,  188,  188,  975,
      974,  188,  188,  188,  188, 1156, 1156,  188,  188, 1156,
      188,  188, 1156,  973,  188,  188,  188,  188,  976,  977,
      188, 1156,  188,  188, 1156,  188,  188, 1156,  188,  188,

      188,  188, 1156,  188,  188,  978, 1156, 1156,  188, 1156,
     1156,  188, 1156,  188,  188,  976,  977,  188,  188,  188,
      188, 1156,  188,  188,  188, 1156,  188,  188,  188, 1156,
      188,  188,  978, 1156,  979,  188,  188,  188,  980, 1156,
      188,  188,  188,  188, 1156,  188,  188,  188, 1156,  188,
      188,  188, 1156,  188,  188,  981, 1156, 1156,  188, 1156,
     1156,  979, 1156,  188,  188,  980,  188,  188,  188,  188,
      188, 1156,  188,  188,  188, 1156,  188,  188, 1022,  188,
      188,  188,  981,  188,  188, 1021, 1156, 1156,  188,  188,
     1156,  188, 1156,  188,  188, 1156,  188, 1156, 1156,  188,

     1156,  188, 1156, 1156, 1156, 1022,  188, 1156, 1156, 1156,
      188,  188, 1021,  188,  188,  188,  188, 1156,  188,  188,
      188,  188, 1156,  188, 1023, 1024,  188,  188,  188,  188,
      188, 1025, 1026, 1156, 1156,  188,  188, 1156, 1156, 1156,
      188,  188,  188,  188, 1156, 1156,  188,  188, 1156, 1156,
     1156, 1023, 1024,  188,  188,  188,  188,  188, 1025, 1026,
      188,  188,  188,  188, 1156, 1027,  188, 1156,  188,  188,
      188,  188, 1156,  188, 1156, 1028, 1156,  188,  188, 1156,
     1156, 1156,  188,  188, 1156, 1156, 1156,  188,  188, 1156,
      188, 1156, 1027,  188, 1156,  188, 1156, 1156,  188, 1156,

      188,  188, 1028,  188,  188,  188,  188,  188, 1156,  188,
      188, 1156,  188, 1156,  188, 1156,  188,  188,  188,  188,
     1029, 1156, 1030, 1156,  188, 1156, 1156, 1156,  188, 1156,
      188,  188, 1156,  188,  188, 1031,  188, 1156, 1156,  188,
     1032,  188,  188,  188, 1033,  188,  188, 1029,  188, 1030,
      188,  188, 1156,  188, 1156,  188,  188, 1156,  188,  188,
     1156, 1156, 1031,  188, 1156, 1156,  188, 1032, 1034,  188,
     1156, 1033,  188, 1156,  188,  188, 1156,  188,  188, 1156,
      188,  188,  188,  188, 1156,  188,  188, 1156, 1156, 1156,
      188,  188, 1156,  188,  188, 1034,  188,  188, 1156,  188,

      188,  188, 1035, 1156,  188,  188, 1156,  188,  188,  188,
     1156, 1156,  188,  188, 1156, 1156, 1156, 1156,  188,  188,
     1156,  188,  188,  188,  188, 1156,  188,  188,  188, 1035,
     1156,  188,  188, 1036,  188,  188,  188, 1156,  188, 1156,
      188,  188, 1156, 1037,  188,  188,  188,  188, 1156,  188,
      188, 1156, 1156,  188,  188,  188, 1156,  188, 1156,  188,
     1036, 1038,  188,  188, 1156,  188, 1156, 1156,  188,  188,
     1037,  188,  188, 1156,  188, 1156,  188,  188, 1156,  188,
     1039,  188, 1156, 1156,  188,  188, 1156,  188, 1038,  188,
      188, 1156,  188,  188, 1156,  188,  188, 1156, 1040, 1156,

      188, 1156,  188,  188,  188, 1041,  188, 1039, 1156, 1156,
      188, 1156,  188, 1156,  188,  188,  188,  188, 1156,  188,
      188,  188,  188, 1156, 1156, 1040, 1156,  188,  188,  188,
     1042,  188, 1041,  188,  188, 1043, 1156,  188, 1156,  188,
      188, 1156,  188,  188,  188,  188,  188,  188,  188,  188,
     1156,  188, 1044, 1156, 1045,  188,  188, 1042,  188, 1156,
      188,  188, 1043, 1156, 1156, 1156,  188,  188, 1156,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188, 1044,
     1156, 1045,  188,  188,  188,  188,  188,  188, 1156, 1156,
     1156, 1156,  188, 1047, 1156, 1156,  188, 1156,  188,  188,

      188, 1156,  188, 1156,  188, 1156, 1156, 1156, 1046,  188,
      188,  188,  188,  188,  188, 1156,  188, 1156,  188,  188,
     1047, 1048, 1156,  188, 1156,  188,  188,  188,  188, 1156,
     1156, 1156, 1156, 1156,  188, 1046, 1156,  188,  188,  188,
     1050,  188, 1156,  188,  188,  188, 1156,  188, 1048, 1049,
      188,  188,  188,  188, 1156,  188,  188, 1052, 1051, 1156,
      188,  188,  188,  188, 1156,  188, 1053, 1050,  188,  188,
      188,  188,  188, 1156,  188,  188, 1049, 1156,  188,  188,
      188, 1054, 1156,  188, 1052, 1051, 1156,  188,  188,  188,
      188, 1156,  188, 1053, 1056, 1156,  188,  188,  188,  188,

      188, 1055,  188,  188, 1156,  188,  188,  188, 1054,  188,
     1156,  188, 1156, 1156, 1156,  188,  188,  188, 1156,  188,
     1156, 1056, 1156, 1156,  188,  188, 1057,  188, 1055,  188,
      188, 1156,  188,  188,  188,  188,  188, 1156,  188,  188,
     1156,  188,  188,  188,  188, 1156,  188,  188, 1156, 1156,
     1156,  188,  188, 1057,  188, 1156,  188, 1156,  188, 1156,
      188, 1156,  188, 1156, 1156,  188,  188, 1156,  188,  188,
      188,  188, 1156,  188,  188, 1156,  188,  188, 1156,  188,
     1058,  188,  188,  188,  188,  188, 1156, 1059,  188, 1156,
     1156, 1156,  188,  188, 1156,  188, 1156,  188,  188,  188,

     1156, 1156, 1156,  188,  188, 1156,  188, 1058, 1079,  188,
      188,  188,  188, 1156, 1059,  188, 1156,  188,  188, 1156,
      188,  188,  188,  188, 1156,  188,  188,  188, 1156, 1156,
      188, 1156, 1156,  188,  188, 1079,  188, 1156, 1156,  188,
     1156, 1156,  188, 1156,  188,  188, 1156,  188,  188,  188,
      188, 1156,  188,  188,  188, 1156, 1156,  188, 1156,  188,
      188,  188, 1156,  188, 1080, 1081, 1156, 1156, 1156,  188,
     1156,  188,  188, 1156,  188,  188,  188,  188, 1156, 1156,
      188,  188, 1156,  188,  188, 1083,  188,  188,  188,  188,
     1156, 1080, 1081, 1084,  188, 1082,  188, 1156,  188,  188,

      188, 1156,  188, 1156,  188, 1156, 1156,  188,  188, 1156,
      188,  188, 1083,  188, 1085,  188,  188, 1156,  188,  188,
     1084,  188, 1156,  188,  188, 1156,  188,  188, 1156, 1156,
      188,  188, 1156, 1156,  188, 1086,  188, 1156, 1156, 1156,
      188, 1085,  188,  188, 1156,  188,  188, 1156,  188, 1087,
     1156,  188, 1156,  188,  188,  188, 1156,  188,  188, 1156,
      188, 1156, 1086,  188, 1156,  188,  188,  188, 1156,  188,
      188,  188,  188, 1156, 1156,  188, 1087, 1156,  188,  188,
     1156,  188,  188, 1088, 1156, 1156, 1156,  188, 1156,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,

     1089, 1090,  188,  188,  188,  188,  188,  188, 1156, 1156,
     1088, 1156, 1156,  188,  188, 1156,  188,  188,  188,  188,
     1156, 1156,  188,  188,  188, 1156,  188, 1089, 1090,  188,
      188,  188,  188, 1156,  188, 1156,  188,  188,  188, 1156,
      188,  188,  188,  188, 1156,  188,  188, 1156, 1092,  188,
      188, 1156, 1156,  188,  188, 1156, 1091, 1156, 1156,  188,
      188,  188, 1156,  188,  188,  188,  188, 1156, 1156,  188,
      188, 1156,  188,  188, 1156, 1092,  188,  188,  188,  188,
     1156,  188, 1156, 1091,  188,  188, 1156,  188,  188,  188,
      188,  188,  188,  188, 1156,  188,  188, 1094, 1156, 1156,

      188, 1156,  188,  188, 1156,  188,  188, 1093, 1156, 1156,
     1156,  188,  188, 1156,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188, 1094, 1095, 1156,  188,  188,  188,
      188,  188, 1097, 1156, 1093, 1156, 1156,  188, 1156, 1156,
     1156,  188,  188,  188,  188, 1156, 1096,  188,  188,  188,
     1156, 1156, 1095, 1156,  188,  188,  188, 1156,  188, 1097,
     1156,  188,  188, 1156,  188, 1156,  188,  188,  188, 1156,
      188,  188,  188, 1096,  188,  188,  188, 1156,  188,  188,
     1112, 1156, 1156,  188,  188, 1156, 1156, 1156,  188,  188,
     1156,  188, 1156,  188,  188,  188, 1156,  188, 1156,  188,

     1156,  188,  188,  188, 1156,  188,  188, 1112, 1113, 1156,
      188,  188, 1156,  188,  188, 1114,  188, 1156,  188,  188,
      188, 1156,  188, 1156,  188, 1116,  188,  188, 1156,  188,
      188, 1115,  188, 1156, 1156, 1113, 1156,  188,  188, 1156,
      188,  188, 1114,  188,  188,  188,  188,  188, 1156,  188,
      188, 1156, 1116,  188,  188, 1156,  188,  188, 1115,  188,
      188,  188, 1117, 1118, 1156,  188,  188,  188, 1156,  188,
     1156,  188,  188,  188,  188,  188, 1156,  188, 1156, 1156,
     1156, 1156,  188, 1156,  188, 1156,  188,  188,  188, 1117,
     1118, 1119,  188,  188,  188, 1156,  188, 1156, 1156,  188,

      188,  188,  188, 1120,  188, 1156, 1121, 1156, 1156,  188,
      188, 1156, 1156,  188,  188,  188, 1122,  188, 1119,  188,
      188,  188, 1156,  188, 1156, 1156,  188,  188,  188,  188,
     1120,  188,  188, 1121, 1156, 1156,  188,  188,  188, 1156,
      188,  188,  188, 1122,  188,  188,  188,  188,  188, 1123,
      188,  188, 1156,  188,  188,  188,  188, 1125, 1156,  188,
     1156, 1156, 1124,  188,  188,  188, 1156,  188,  188,  188,
     1156, 1156,  188,  188,  188,  188, 1123, 1156,  188, 1133,
      188,  188,  188, 1156, 1125, 1134, 1156,  188, 1156, 1124,
     1135,  188,  188, 1136, 1156,  188,  188,  188,  188, 1137,

      188,  188,  188,  188, 1156,  188, 1133, 1156,  188,  188,
      188, 1156, 1134, 1156,  188,  188,  188, 1135, 1156,  188,
     1136,  188,  188, 1156,  188,  188, 1137,  188,  188,  188,
      188, 1156,  188,  188,  188, 1156, 1156,  188,  188,  188,
      188, 1156,  188,  188,  188, 1156,  188,  188,  188,  188,
     1156,  188, 1156, 1156, 1156,  188,  188, 1156, 1156, 1156,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188, 1156,  188,  188,  188,  188,  188,  188, 1138,
      188,  188, 1156, 1144, 1156, 1156,  188,  188, 1156,  188,
      188,  188, 1139,  188,  188,  188,  188,  188, 1156,  188,

     1156, 1156,  188,  188,  188,  188, 1138,  188,  188, 1156,
     1144,  188,  188,  188,  188, 1156, 1156,  188, 1156, 1139,
      188,  188, 1156,  188,  188, 1156,  188, 1156, 1145,  188,
     1156, 1156,  188, 1146,  188,  188,  188, 1156,  188,  188,
      188,  188, 1156, 1156,  188, 1156,  188,  188,  188, 1156,
      188,  188,  188, 1156, 1156, 1145,  188, 1147,  188,  188,
     1146,  188,  188,  188,  188, 1156, 1156,  188,  188, 1151,
      188,  188, 1152,  188,  188,  188,  188, 1156, 1156,  188,
     1156, 1156,  188,  188, 1147,  188,  188,  188,  188, 1153,
     1156,  188, 1156,  188, 1156,  188, 1151,  188,  188, 1152,

      188, 1156, 1156,  188, 1156,  188,  188, 1156, 1156,  188,
      188,  188,  188, 1156,  188,  188, 1153, 1156,  188,  188,
      188, 1156,  188, 1155,  188, 1156, 1156,  188,  188, 1156,
      188, 1156,  188,  188,  188, 1156, 1156,  188,  188,  188,
     1156,  188, 1156, 1156, 1156,  188,  188, 1156, 1156, 1156,
     1155,  188, 1156, 1156, 1156,  188, 1156,  188, 1156, 1156,
     1156,  188, 1156, 1156,  188, 1156, 1156, 1156,  188,   46,
       46,   46,   46,   46,   46,   87, 1156, 1156,   87,   87,
       87,   88,   88,   88,   88,   88,   88,   97,   97,  175,
     1156,  175,  175,  175,  175,  178, 1156,  178,  178,  178,

      178,  179,  179,  179,  179,  179,  179,  372,  372,  479,
     1156,  479,  479,  479,  479,    7, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156
    } ;

static const flex_int16_t yy_chk[6584] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15,   27,
       15,   17,   17,   18,   18,   20,   20,   20,   26,   20,
       29,   21,  990,   30,   26,   20,   32,   20,   21,  374,
       36,   21,   20,   20,   20,   98,   27,   42,   42,   48,
       48,   21,   20,   20,   20,   26,   20,   29,   21,   22,
       30,   26,   20,   32,   20,   21,   22,   36,   21,   20,
       20,   20,   98,   22,   42,   42,   22,   23,   21,   22,

      372,   23,   35,   53,   24,   23,   22,   53,   35,  267,
       41,   23,  179,   22,   23,   24,  179,   24,   41,   25,
       22,  184,   24,   22,   23,  183,   22,   24,   23,   35,
       25,   24,   23,   25,  178,   35,   25,   41,   23,   25,
      173,   23,   24,   31,   24,   41,   25,   31,   33,   24,
       99,   28,   28,   31,   24,   49,   49,   25,   28,   28,
       25,   34,   33,   25,   28,   54,   25,   54,   33,   34,
       31,   56,   56,   34,   31,   33,   34,   99,   28,   28,
       31,   57,   57,   38,  100,   28,   28,   38,   34,   33,
       37,   28,   85,   85,   37,   33,   34,   40,   37,   40,

       34,   39,   40,   34,   37,   39,   91,   91,   39,  101,
       38,  100,  104,  103,   38,   39,  103,   37,   39,  176,
      176,   37,  182,  182,   40,   37,   40,   93,   39,   40,
       92,   37,   39,   88,   87,   39,  101,   84,   58,  104,
      103,   55,   39,  103,   51,   39,   59,   59,   50,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   60,   60,   60,   60,   60,  105,  102,
      106,  107,  107,   60,  108,   60,   60,  102,  109,  111,
       60,   60,   60,   45,  112,  107,   60,   43,  115,  116,
       60,   60,   60,   60,   60,  105,  102,  106,  107,  107,
       60,  108,   60,   60,  102,  109,  111,   60,   60,   60,
       65,  112,  107,   60,   61,  115,  116,   65,   61,   19,
       65,   61,   66,   65,  118,   61,   66,   16,   61,  119,
       65,   61,  120,   66,   61,   14,   66,   65,   61,   11,
      121,   61,    7,    0,   65,   61,   66,   65,   61,   66,

       65,  118,   61,   66,  114,   61,  119,   65,   61,  120,
       66,   61,   68,   66,  114,   61,   62,  121,   69,   68,
       62,  122,   68,   66,   62,   69,  123,   62,   69,  124,
       62,  114,   68,   62,    0,  113,  113,  113,   69,   68,
       62,  114,    0,   62,  126,   69,   68,   62,  122,   68,
        0,   62,   69,  123,   62,   69,  124,   62,  127,   68,
       62,   75,  113,  113,  113,   69,  128,   62,   63,   75,
       70,  126,   63,   75,   70,  129,   75,   70,  130,   63,
       70,   63,   63,  131,    0,  127,   63,  132,   75,    0,
       70,   63,   63,  128,  133,   63,   75,   70,    0,   63,

       75,   70,  129,   75,   70,  130,   63,   70,   63,   63,
      131,   71,    0,   63,  132,   71,   72,   70,   63,   63,
       64,  133,   71,   72,  135,   71,  125,   64,  136,  138,
       72,   64,  125,   72,   64,   71,   72,   64,   71,  125,
       64,    0,   71,   72,  139,  140,    0,   64,  141,   71,
       72,  135,   71,  125,   64,  136,  138,   72,   64,  125,
       72,   64,   71,   72,   64,  143,  125,   64,   67,  144,
       74,  139,  140,   67,   67,  141,   74,  145,   74,   67,
       67,   67,   74,  146,  147,   74,   67,  142,  148,  142,
        0,   67,  143,  150,    0,   67,  144,   74,    0,    0,

       67,   67,  151,   74,  145,   74,   67,   67,   67,   74,
      146,  147,   74,   67,  142,  148,  142,   76,   67,   73,
      150,   76,  152,   82,   73,   76,   73,  154,  155,  151,
      153,   76,   73,   73,   76,   82,   73,    0,  153,   73,
      157,    0,  159,   82,   76,    0,   73,   82,   76,  152,
       82,   73,   76,   73,  154,  155,  161,  153,   76,   73,
       73,   76,   82,   73,   77,  153,   73,  157,   77,  159,
       82,   80,   77,    0,   82,   80,    0,   82,   77,   80,
        0,   77,    0,  161,    0,   80,    0,  163,   80,    0,
        0,   77,   83,  160,    0,   77,    0,  117,   80,   77,

       83,  160,   80,  117,   83,   77,   80,   83,   77,   78,
      117,  117,   80,   78,  163,   80,   78,   78,  166,   83,
      160,  158,  162,   78,  117,  167,   78,   83,  160,    0,
      117,   83,  158,  162,   83,    0,   78,  117,  117,    0,
       78,  137,    0,   78,   78,  166,  137,  165,  158,  162,
       78,  137,  167,   78,   79,  165,  137,  137,  168,  158,
      162,    0,   79,  169,   79,  171,   79,   79,  137,   79,
        0,  172,  169,  137,  165,  170,    0,    0,  137,    0,
        0,   79,  165,  137,  137,  168,    0,    0,  170,   79,
      169,   79,  171,   79,   79,  188,   79,   81,  172,  169,

      217,   81,  170,  188,   81,   81,  217,  188,  268,  189,
      188,   81,  269,  217,   81,  170,  189,    0,  271,  189,
        0,    0,  188,    0,   81,    0,    0,  217,   81,  189,
      188,   81,   81,  217,  188,  268,  189,  188,   81,  269,
      217,   81,  156,  189,  156,  271,  189,  156,  156,  273,
      156,    0,  190,  156,  274,  156,  189,  156,  192,  190,
      156,  277,  190,    0,    0,  192,  278,  190,  192,  156,
      279,  156,  190,  192,  156,  156,  273,  156,  192,  190,
      156,  274,  156,    0,  156,  192,  190,  156,  277,  190,
      191,  191,  192,  278,  190,  192,  225,  279,  191,  190,

      192,  191,  225,  280,  281,  192,  193,  282,    0,  225,
      195,  191,  195,  193,  283,    0,  193,  191,  191,  195,
      285,  193,  195,  225,  287,  191,  193,    0,  191,  225,
      280,  281,  195,  193,  282,  196,  225,  195,  191,  195,
      193,  283,  196,  193,    0,  196,  195,  285,  193,  195,
      196,  287,  206,  193,  194,  196,  197,  194,  194,  195,
      206,  286,  196,  197,  206,  194,  197,  206,  194,  196,
      286,  197,  196,  288,  289,    0,  197,  196,  194,  206,
        0,  194,  196,  197,  194,  194,  288,  206,  286,  199,
      197,  206,  194,  197,  206,  194,  199,  286,  197,  199,

      288,  289,  221,  197,  290,  194,  198,  198,  221,  199,
        0,  221,  200,  288,  198,  221,  199,  201,  198,  200,
      198,  198,  200,  199,  201,  291,  199,  201,    0,  221,
        0,  290,  200,  198,  198,  221,  199,  201,  221,  200,
      292,  198,  221,  202,  201,  198,  200,  198,  198,  200,
      202,  201,  291,  202,  201,  203,  284,  202,  284,  200,
        0,  205,  203,  202,  201,  203,    0,  292,  205,  294,
      202,  205,  295,  284,  293,  203,    0,  202,  293,  207,
      202,  205,  203,  284,  202,  284,    0,  207,  205,  203,
      202,  207,  203,  207,  207,  205,  294,  296,  205,  295,

      284,  293,  203,  204,  297,  293,  207,    0,  205,  211,
      204,  204,  204,  204,  207,    0,  211,  298,  207,  211,
      207,  207,  299,  204,  296,  300,  301,    0,  209,  211,
      204,  297,    0,    0,  209,    0,  211,  204,  204,  204,
      204,  209,  209,  211,  298,  303,  211,    0,    0,  299,
      204,  208,  300,  301,  230,  209,  211,  208,    0,  208,
      230,  209,  210,  208,  208,  208,  208,  230,  209,  209,
      210,  305,  303,  212,  210,  212,  306,  210,  208,  307,
      308,  230,  212,    0,  208,  212,  208,  230,    0,  210,
      208,  208,  208,  208,  230,  212,    0,  210,  305,    0,

      212,  210,  212,  306,  210,  213,  307,  308,  214,  212,
      214,  213,  212,  309,  310,  218,  214,  215,  213,  213,
      215,  218,  212,  214,  214,  311,  215,  218,  218,    0,
        0,  312,  213,  215,  215,  214,    0,  214,  213,  313,
      309,  310,  218,  214,  215,  213,  213,  215,  218,  304,
      214,  214,  311,  215,  218,  218,  304,  219,  312,    0,
      215,  215,  216,  219,  314,  216,  313,  315,  216,  316,
      219,  216,  219,  317,  220,  216,  304,  318,  216,  216,
      220,  319,    0,  304,  219,    0,  220,  220,    0,  216,
      219,  314,  216,  322,  315,  216,  316,  219,  216,  219,

      317,  220,  216,  222,  318,  216,  216,  220,  319,  222,
      323,  223,  224,  220,  220,  222,  222,  223,  224,  321,
      322,  226,  240,  223,  223,  224,    0,  226,  240,  321,
      222,  224,  226,    0,  226,  240,  222,  323,  223,  224,
      325,  326,  222,  222,  223,  224,  321,  227,  226,  240,
      223,  223,  224,  227,  226,  240,  321,  227,  224,  226,
      227,  226,  240,  327,    0,  328,  329,  325,  326,  231,
      229,  243,    0,  243,  227,  231,  229,    0,    0,  243,
      227,  229,  231,  229,  227,  330,  243,  227,  228,  228,
      327,  231,  328,  329,  228,  331,  231,  229,  243,  228,

      243,  228,  231,  229,  228,  228,  243,    0,  229,  231,
      229,  232,  330,  243,  232,  228,  228,  232,  231,  332,
      333,  228,  331,  234,  232,  334,  228,  233,  228,  234,
      335,  228,  228,  233,  234,  233,  234,  233,  232,    0,
      233,  232,  235,  336,  232,    0,  332,  333,  235,  337,
      234,  232,  334,    0,  233,  235,  234,  335,    0,  235,
      233,  234,  233,  234,  233,  338,  236,  233,  237,  235,
      336,  238,  236,  320,  237,  235,  337,  238,  339,  236,
      238,  237,  235,  236,  238,  237,  235,    0,  320,    0,
      241,  241,  338,  236,  340,  237,  241,  341,  238,  236,

      320,  237,  342,  241,  238,  339,  236,  238,  237,    0,
      236,  238,  237,  239,  242,  320,  239,  241,  241,  239,
      242,  340,    0,  241,  341,  343,  239,  242,  344,  342,
      241,  242,  246,    0,  244,    0,  244,  345,  246,    0,
      239,  242,  244,  239,  248,  246,  239,  242,  248,  244,
      248,  346,  343,  239,  242,  344,  347,  248,  242,  246,
      245,  244,  245,  244,  345,  246,  245,  348,  349,  244,
        0,  248,  246,  245,    0,  248,  244,  248,  346,    0,
        0,    0,    0,  347,  248,    0,  350,  245,    0,  245,
      351,  250,    0,  245,  348,  349,  353,  250,  354,  356,

      245,  247,  249,  247,  250,  357,  247,  247,  249,  247,
      250,  249,  247,  350,  247,  249,  247,  351,  250,  247,
        0,    0,  249,  353,  250,  354,  356,    0,  247,  249,
      247,  250,  357,  247,  247,  249,  247,  250,  249,  247,
      358,  247,  249,  247,  251,    0,  247,  252,  252,  249,
      251,  359,  360,    0,  252,  361,    0,  251,  251,  253,
      254,  252,  254,  363,  364,  253,  254,  358,    0,  253,
      255,  251,  253,  254,  252,  252,  255,  251,  359,  360,
      253,  252,  361,  255,  251,  251,  253,  254,  252,  254,
      363,  364,  253,  254,  365,  257,  253,  255,  366,  253,

      254,  257,  367,  255,  256,  259,  256,  253,  257,  368,
      255,  259,  256,  370,  258,  258,  480,  260,  259,  256,
      258,  365,  257,  260,    0,  366,  260,  258,  257,  367,
      260,  256,  259,  256,    0,  257,  368,    0,  259,  256,
      370,  258,  258,  480,  260,  259,  256,  258,  369,  261,
      260,  261,  369,  260,  258,  261,  362,  260,  362,  262,
      263,  262,  261,  481,  261,  262,  263,  482,  483,  484,
      485,  486,  262,  263,  487,  369,  261,  263,  261,  369,
      488,    0,  261,  362,    0,  362,  262,  263,  262,  261,
      481,  261,  262,  263,  482,  483,  484,  485,  486,  262,

      263,  487,    0,  489,  263,  264,  264,  488,  264,  264,
      264,  264,  264,  264,  375,  264,  264,  264,  376,  377,
      375,  491,    0,    0,  376,  377,  492,  375,    0,  375,
      489,  376,  377,  495,    0,  496,  378,  379,  378,    0,
        0,  375,  378,  379,  264,  376,  377,  375,  491,  378,
      379,  376,  377,  492,  375,  380,  375,  380,  376,  377,
      495,  380,  496,  378,  379,  378,  381,  382,  380,  378,
      379,  264,  381,  382,  497,  381,  378,  379,    0,  381,
      382,    0,  380,  383,  380,  498,  499,    0,  380,  383,
      384,  385,  384,  381,  382,  380,  383,  385,  384,  381,

      382,  497,  381,  385,  385,  384,  381,  382,  386,  387,
      383,    0,  498,  499,  386,  387,  383,  384,  385,  384,
      386,  386,  387,  383,  385,  384,    0,  500,    0,    0,
      385,  385,  384,  388,    0,  386,  387,  389,  389,  388,
      501,  386,  387,  502,  389,    0,  388,  386,  386,  387,
      390,  389,    0,  388,  500,  391,  390,  391,    0,  390,
      388,  391,  503,  390,  389,  389,  388,  501,  391,    0,
      502,  389,  391,  388,    0,    0,  504,  390,  389,  392,
      388,    0,  391,  390,  391,  392,  390,  393,  391,  503,
      390,  394,  392,  393,  505,  391,  393,  394,  506,  391,

      393,  394,  395,  504,  394,  393,  392,  507,  395,    0,
      509,    0,  392,  510,  393,  395,  395,    0,  394,  392,
      393,  505,    0,  393,  394,  506,  511,  393,  394,  395,
      515,  394,  393,  397,  507,  395,  396,  509,  396,  397,
      510,  398,  395,  395,  396,  516,  397,  398,  517,  397,
        0,  396,  518,  511,  398,    0,  398,  515,  519,  521,
      397,    0,  399,  396,  399,  396,  397,  522,  398,    0,
      399,  396,  516,  397,  398,  517,  397,  399,  396,  518,
      400,  398,  400,  398,  400,  519,  521,  402,  400,  399,
      401,  399,  401,  402,  522,  400,  401,  399,    0,  526,

      402,  527,    0,  401,  399,  528,    0,  400,    0,  400,
      403,  400,  403,    0,  402,  400,  529,  401,  403,  401,
      402,  530,  400,  401,    0,  403,  526,  402,  527,  404,
      401,    0,  528,  405,  405,  404,  531,  403,  406,  403,
      405,  532,  404,  529,  406,  403,  404,  405,  530,    0,
      533,  406,  403,  407,    0,  534,  404,    0,  407,  407,
      405,  405,  404,  531,    0,  406,  407,  405,  532,  404,
      408,  406,  408,  404,  405,  409,  408,  533,  406,    0,
      407,  409,  534,  408,  411,  407,  407,  537,  409,    0,
      410,  411,  410,  407,  411,  541,    0,  408,  410,  408,

      412,    0,  409,  408,  411,  410,  412,    0,  409,  543,
      408,  411,  535,  412,  537,  409,  412,  410,  411,  410,
        0,  411,  541,  535,    0,  410,  544,  412,  413,  414,
        0,  411,  410,  412,  413,  414,  543,  413,  414,  535,
      412,  413,  414,  412,  415,  416,  415,  416,  545,  547,
      535,  416,  415,  544,  548,  413,  414,  417,  416,  415,
      549,  413,  414,  417,  413,  414,    0,  417,  413,  414,
      417,  415,  416,  415,  416,  545,  547,    0,  416,  415,
      551,  548,  418,  420,  417,  416,  415,  549,  418,  420,
      417,  418,  419,  419,  417,  418,  420,  417,  421,  419,

      552,  420,  553,    0,  421,  554,  419,  551,  556,  418,
      420,  421,    0,    0,    0,  418,  420,  557,  418,  419,
      419,    0,  418,  420,  422,  421,  419,  552,  420,  553,
      422,  421,  554,  419,    0,  556,  422,  422,  421,  423,
      424,  423,  424,  425,  557,  423,  424,  558,  426,  425,
      426,  422,  423,  424,  426,    0,  425,  422,    0,    0,
      425,  426,    0,  422,  422,    0,  423,  424,  423,  424,
      425,    0,  423,  424,  558,  426,  425,  426,  559,  423,
      424,  426,  428,  425,  427,  429,  427,  425,  426,  428,
      427,  429,  428,  430,  431,  560,  561,  427,  429,  430,

      431,  427,  428,  429,  430,  559,  430,  431,    0,  428,
        0,  427,  429,  427,    0,  562,  428,  427,  429,  428,
      430,  431,  560,  561,  427,  429,  430,  431,  427,  428,
      429,  430,  432,  430,  431,  433,    0,  433,  432,  563,
      434,  433,  562,  564,  565,  432,  434,  566,  433,  432,
      435,    0,    0,  434,  435,    0,  435,    0,    0,  432,
      567,    0,  433,  435,  433,  432,  563,  434,  433,  568,
      564,  565,  432,  434,  566,  433,  432,  435,  436,  437,
      434,  435,  438,  435,  436,  437,  569,  567,  438,    0,
      435,  436,  437,  438,  439,  438,  568,  437,  572,    0,

      439,  573,    0,  439,    0,  436,  437,  439,    0,  438,
      440,  436,  437,  569,    0,  438,  440,    0,  436,  437,
      438,  439,  438,  440,  437,  572,  440,  439,  573,  441,
      439,  441,  574,  446,  439,  441,    0,  440,  442,  446,
      442,  443,  441,  440,  442,  575,  446,  443,  446,    0,
      440,  442,  443,  440,  443,    0,  441,  444,  441,  574,
      446,  444,  441,  444,    0,  442,  446,  442,  443,  441,
      444,  442,  575,  446,  443,  446,  445,    0,  442,  443,
      576,  443,  445,    0,  444,  447,  445,  448,  444,  445,
      444,  447,  577,  448,  578,    0,  448,  444,  447,  579,

      448,  447,  581,  445,  449,    0,    0,  576,    0,  445,
      449,  583,  447,  445,  448,  584,  445,  449,  447,  577,
      448,  578,  449,  448,  691,  447,  579,  448,  447,  581,
      450,  449,  450,  451,  452,  451,  450,  449,  583,  451,
      452,  694,  584,  450,  449,  452,  451,  452,  695,  449,
        0,  691,  453,    0,  453,    0,  696,  450,  453,  450,
      451,  452,  451,  450,  697,  453,  451,  452,  694,  454,
      450,  454,  452,  451,  452,  695,    0,  454,  699,  453,
      455,  453,  456,  696,  454,  453,  455,    0,  456,  455,
        0,  697,  453,  455,    0,  456,  454,  457,  454,  456,

        0,  700,  457,  457,  454,  699,  459,  455,  458,  456,
      457,  454,  459,  455,  458,  456,  455,  458,  701,  459,
      455,  458,  456,  703,  457,  460,  456,  460,  700,  457,
      457,  460,    0,  459,  461,  458,  461,  457,  460,  459,
      461,  458,  704,  462,  458,  701,  459,  461,  458,  462,
      703,  463,  460,  464,  460,  705,  462,  463,  460,  464,
      463,  461,  465,  461,  463,  460,  464,  461,  465,  704,
      462,    0,    0,  706,  461,  465,  462,    0,  463,  465,
      464,    0,  705,  462,  463,  707,  464,  463,  466,  465,
        0,  463,  467,  464,  466,  465,  708,  710,  467,  466,

      706,  466,  465,  467,  468,  467,  465,    0,  468,    0,
      468,  711,  707,    0,    0,  466,  712,  468,    0,  467,
      713,  466,    0,  708,  710,  467,  466,  469,  466,    0,
      467,  468,  467,  469,  470,  468,  470,  468,  711,  469,
      469,  469,  470,  712,  468,  471,  472,  713,    0,  470,
        0,  471,  472,    0,  469,  714,  471,    0,  471,  472,
      469,  470,    0,  470,  472,    0,  469,  469,  469,  470,
        0,  473,  471,  472,  474,  475,  470,  473,  471,  472,
      474,  475,  714,  471,  473,  471,  472,  474,  475,  473,
      477,  472,  475,  585,  474,  477,  477,  476,  473,  585,

      715,  474,  475,  477,  473,  476,  585,  474,  475,  476,
      585,  473,  476,    0,  474,  475,  473,  477,    0,  475,
      585,  474,  477,  477,  476,    0,  585,  715,    0,  716,
      477,    0,  476,  585,    0,    0,  476,  585,  717,  476,
      479,  479,    0,  479,  479,  479,  479,  479,  479,  586,
      479,  479,  479,  587,  588,  586,  716,  718,  590,  587,
      588,  586,  586,    0,  590,  717,  587,  588,  587,  588,
      719,  590,    0,  720,    0,    0,  586,  589,  721,  479,
      587,  588,  586,  589,  718,  590,  587,  588,  586,  586,
      589,  590,    0,  587,  588,  587,  588,  719,  590,  589,

      720,  591,  593,  592,  589,  721,  479,  591,  593,  592,
      589,  722,  724,  593,  591,  593,  592,  589,  592,  594,
        0,  594,    0,  726,  727,  594,  589,    0,  591,  593,
      592,  595,  594,    0,  591,  593,  592,  595,  722,  724,
      593,  591,  593,  592,  595,  592,  594,  596,  594,  596,
      726,  727,  594,  596,  597,  598,  597,  599,  595,  594,
      596,  598,  597,  599,  595,    0,    0,    0,  598,  597,
      599,  595,  728,    0,  596,    0,  596,  729,  730,  732,
      596,  597,  598,  597,  599,  600,    0,  596,  598,  597,
      599,  600,  601,  600,  601,  598,  597,  599,  600,  728,

      601,  733,  603,  602,  729,  730,  732,  601,  603,  602,
        0,    0,  600,  602,    0,  603,  602,    0,  600,  601,
      600,  601,  734,    0,  735,  600,  736,  601,  733,  603,
      602,  605,  604,  606,  601,  603,  602,  605,  604,  606,
      602,  604,  603,  602,  605,  604,  606,  739,  605,  734,
      606,  735,    0,  736,    0,    0,  740,    0,  605,  604,
      606,    0,  741,  607,  605,  604,  606,  744,  604,  607,
      745,  605,  604,  606,  739,  605,  607,  606,  608,  607,
      608,  609,  609,  740,  608,  748,  610,  611,  609,  741,
      607,  608,  610,  611,  744,  609,  607,  745,  749,  610,

      611,  750,  611,  607,  610,  608,  607,  608,  609,  609,
      751,  608,  748,  610,  611,  609,    0,  612,  608,  610,
      611,    0,  609,  612,  752,  749,  610,  611,  750,  611,
      612,  610,  613,  614,  612,  615,  753,  751,  613,  614,
      754,  615,  755,  616,  612,  613,  614,    0,  615,  616,
      612,  752,  616,    0,  757,    0,  616,  612,  617,  613,
      614,  612,  615,  753,  617,  613,  614,  754,  615,  755,
      616,  617,  613,  614,  618,  615,  616,  758,  759,  616,
      618,  757,  619,  616,  620,  617,  621,  618,  619,    0,
      620,  617,  621,  761,  762,  619,    0,  620,  617,  621,

      763,  618,    0,  765,  758,  759,  766,  618,    0,  619,
      622,  620,  623,  621,  618,  619,  622,  620,  623,  621,
      761,  762,  619,  622,  620,  623,  621,  763,  622,  623,
      765,  768,  624,  766,  624,  625,  626,  622,  627,  623,
      624,  625,  626,  622,  627,  623,    0,  624,  625,  626,
      622,  627,  623,  626,  769,  622,  623,  770,  768,  624,
      628,  624,  625,  626,  629,  627,  628,  624,  625,  626,
      629,  627,  772,  628,  624,  625,  626,  629,  627,  630,
      626,  769,  631,  632,  770,  630,  857,  628,  631,  632,
      859,  629,  630,  628,  632,  631,  632,  629,  861,  772,

      628,  634,  634,    0,  629,  633,  630,  634,  862,  631,
      632,  633,  630,  857,  634,  631,  632,  859,  633,  630,
      633,  632,  631,  632,  636,  861,  863,  635,  634,  634,
      636,    0,  633,  635,  634,  862,  864,  636,  633,  867,
      635,  634,  868,  637,  870,  633,  638,  633,  635,  637,
      871,  636,  638,  863,  635,  872,  637,  636,  637,  638,
      635,  638,    0,  864,  636,  876,  867,  635,    0,  868,
      637,  870,    0,  638,  880,  635,  637,  871,  639,  638,
      639,  641,  872,  637,  639,  637,  638,  641,  638,  640,
      642,  639,  876,  640,  641,  640,  642,  882,    0,  642,

      643,  880,  640,  642,  640,  639,  643,  639,  641,    0,
        0,  639,  883,  643,  641,    0,  640,  642,  639,  644,
      640,  641,  640,  642,  882,  644,  642,  643,  645,  640,
      642,  640,  644,  643,  645,    0,  646,  647,    0,  883,
      643,  645,  646,  647,  886,  887,  644,  888,    0,  646,
      647,    0,  644,  646,    0,  645,  890,    0,  873,  644,
      648,  645,  873,  646,  647,  648,  648,  891,  645,  646,
      647,  886,  887,  648,  888,  649,  646,  647,  650,    0,
      646,  649,    0,  890,  650,  873,    0,  648,  649,  873,
      649,  650,  648,  648,  891,    0,  650,  651,  892,  894,

      648,  895,  649,  651,    0,  650,  653,  652,  649,  652,
      651,  650,  653,  652,  898,  649,  654,  649,  650,  653,
      652,  653,  654,  650,  651,  892,  894,    0,  895,  654,
      651,  654,  655,  653,  652,    0,  652,  651,  655,  653,
      652,  898,    0,  654,  656,  655,  653,  652,  653,  654,
      656,  899,  900,  657,  656,  657,  654,  656,  654,  655,
      659,  657,  659,  658,    0,  655,  659,  902,  657,  658,
        0,  656,  655,  659,    0,    0,  658,  656,  899,  900,
      657,  656,  657,  903,  656,  658,  660,  659,  657,  659,
      658,  661,  660,  659,  902,  657,  658,  661,  905,  660,

      659,  662,  663,  658,  661,  906,  661,  662,  663,  907,
      903,    0,  658,  660,  662,  663,  662,    0,  661,  660,
        0,  908,  910,  663,  661,  905,  660,  911,  662,  663,
        0,  661,  906,  661,  662,  663,  907,  912,  664,  664,
      917,  662,  663,  662,  664,  665,  666,  665,  908,  910,
      663,  664,  666,  665,  911,  667,  666,  667,    0,  666,
      665,    0,  668,  667,  912,  664,  664,  917,  668,  918,
      667,  664,  665,  666,  665,  668,    0,  668,  664,  666,
      665,  983,  667,  666,  667,  671,  666,  665,  669,  668,
      667,  671,  670,  670,  669,  668,  918,  667,  671,  670,

      988,  669,  668,  672,  668,  669,  670,  989,  983,  672,
      991,  673,  671,  673,    0,  669,  672,  673,  671,  670,
      670,  669,  993,  994,  673,  671,  670,  988,  669,  674,
      672,  995,  669,  670,  989,  674,  672,  991,  673,  675,
      673,  674,  674,  672,  673,  675,  996,  676,  677,  993,
      994,  673,  675,  676,  677,    0,  674,    0,  995,    0,
      676,  677,  674,    0,  677,    0,  675,  999,  674,  674,
     1001,  679,  675,  996,  676,  677, 1004,  679, 1008,  675,
      676,  677,  679,  680,  679, 1009,  678,  676,  677,  680,
      678,  677,  678, 1013,  999,    0,  680, 1001,  679,  678,

        0,  680,    0, 1004,  679, 1008,    0, 1014,  681,  679,
      680,  679, 1009,  678,  681, 1015,  680,  678,  682,  678,
     1013,  681,  682,  680,  682,  681,  678,  684,  680,  684,
     1016,  682,    0,  684, 1014,  681,    0,  683, 1017,    0,
      684,  681, 1015,  683, 1060,  682, 1062,    0,  681,  682,
      683,  682,  681,  685,  684,  683,  684, 1016,  682,  685,
      684, 1065,  687,  686,  683, 1017,  685,  684,  687,  686,
      683, 1060,  688, 1062,  688,  687,  686,  683,  688,    0,
      685,  686,  683,    0, 1068,  688,  685, 1069, 1065,  687,
      686,  773,    0,  685,  689,  687,  686,  773, 1070,  688,

      689,  688,  687,  686,  773,  688,  689,  689,  686,  774,
      775, 1068,  688,  776, 1069,  774,  775, 1071,  773,  776,
      774,  689,  774,  775,  773, 1070,  776,  689,    0,    0,
        0,  773,  777,  689,  689,  781,  774,  775,  777,    0,
      776,  781,  774,  775, 1071,  777,  776,  774,  781,  774,
      775,  778,    0,  776,    0,  777,  778,  778,    0,  777,
      779,  780,  781,  780,  778,  777,  779,  780,  781,    0,
        0,  779,  777,  779,  780,  781,    0, 1072,  778,  782,
     1073,  782,  777,  778,  778,  782, 1076,  779,  780, 1077,
      780,  778,  782,  779,  780,  783,  785,  783,  779,    0,

      779,  780,  785,  783, 1072,    0,  782, 1073,  782,  785,
      783,    0,  782, 1076,  784,  784, 1077,    0, 1078,  782,
      784, 1098,  783,  785,  783, 1099,  786,  784,    0,  785,
      783, 1100,  786, 1101,    0, 1102,  785,  783,  787,  786,
        0,  784,  784,  786,  787, 1078,    0,  784, 1098,  787,
      788,  787, 1099,  786,  784,  789,  788, 1108, 1100,  786,
     1101,  789, 1102,  788,    0,  787,  786,  788,  789, 1111,
      786,  787, 1126,  791,  790,  791,  787,  788,  787,  791,
      790,    0,  789,  788, 1108,  792,  791,  790,  789,  790,
      788,  792,    0,    0,  788,  789, 1111,  793,  792, 1126,

      791,  790,  791,  793, 1128, 1129,  791,  790,  793,    0,
      793, 1132,  792,  791,  790,    0,  790,    0,  792,  794,
      795,  794,    0,    0,  793,  792,  795,  794,    0,  795,
      793, 1128, 1129,  795,  794,  793,  796,  793, 1132,  797,
     1140,  797,  796, 1141,  799,  797,  794,  795,  794,  796,
      799,  796,  797,  795,  794,  799,  795,  799,    0,    0,
      795,  794,    0,  796,    0,    0,  797, 1140,  797,  796,
     1141,  799,  797, 1142, 1063,  798,  796,  799,  796,  797,
      798,  798,  799,  800,  799,  800,  802, 1148,  798,  800,
     1063,  801,  802,  801,    0,    0,  800,  801,    0,  802,

     1142, 1063,  798,  802,  801,    0,    0,  798,  798,    0,
      800,    0,  800,  802, 1148,  798,  800, 1063,  801,  802,
      801,  803,  804,  800,  801,    0,  802,  803,  804,    0,
      802,  801,    0,  805,  803,  804,    0,  803,  804,  805,
        0,    0,    0,    0,  806,  808,  805,    0,  803,  804,
      806,  808,    0,    0,  803,  804,    0,  806,  808,    0,
      805,  803,  804,  807,  803,  804,  805,  807,    0,  807,
        0,  806,  808,  805,    0,  809,  807,  806,  808,  809,
      810,  809,  810,    0,  806,  808,  810,    0,  809,    0,
      807,  811,    0,  810,  807,    0,  807,  811,    0,  812,

        0,  812,  809,  807,  811,  812,  809,  810,  809,  810,
        0,    0,  812,  810,  813,  809,  813,  814,  811,    0,
      810,  815,  813,  814,  811,    0,  812,  815,  812,  813,
      814,  811,  812,    0,  815,    0,    0,    0,  815,  812,
        0,  813,    0,  813,  814,  816,    0,  816,  815,  813,
      814,    0,    0,  816,  815,    0,  813,  814,    0,    0,
      816,  815,  817,  818,  817,  815,    0,    0,  817,  818,
        0,  820,  816,    0,  816,  817,  818,  820,    0,  818,
      816,    0,    0,    0,  820,    0,  821,  816,  819,  817,
      818,  817,  821,    0,  819,  817,  818,  819,  820,  821,

        0,  819,  817,  818,  820,    0,  818,    0,  822,    0,
      822,  820,    0,  821,    0,  819,  822,    0,    0,  821,
        0,  819,    0,  822,  819,  823,  821,  824,  819,    0,
        0,  823,    0,  824,  823,  822,  825,  822,  823,    0,
      824,    0,  825,  822,  824,    0,    0,    0,    0,  825,
      822,  826,  823,    0,  824,    0,    0,  826,  823,    0,
      824,  823,    0,  825,  826,  823,  827,  824,  827,  825,
        0,  824,    0,  828,  827,    0,  825,  829,  826,  828,
        0,  827,    0,  829,  826,    0,  828,    0,  828,    0,
      829,  826,  830,  827,    0,  827,  831,    0,  830,    0,

      828,  827,  831,    0,  829,  830,  828,    0,  827,  831,
      829,    0,  831,  828,  832,  828,  832,  829,  833,  830,
      832,    0,  835,  831,  833,  830,    0,  832,  835,  831,
        0,  833,  830,    0,    0,  835,  831,    0,  835,  831,
      834,  832,  834,  832,    0,  833,  834,  832,    0,  835,
      836,  833,  836,  834,  832,  835,  836,    0,  833,    0,
        0,    0,  835,  836,    0,  835,    0,  834,  837,  834,
        0,    0,  838,  834,  837,    0,  839,  836,  838,  836,
      834,  837,  839,  836,    0,  838,    0,    0,    0,  839,
      836,    0,  840,    0,  840,  837,    0,    0,  841,  838,

      840,  837,    0,  839,  841,  838,    0,  840,  837,  839,
      841,  841,  838,    0,    0,    0,  839,  843,    0,  840,
        0,  840,  842,  843,    0,  841,    0,  840,  842,    0,
      843,  841,    0,    0,  840,  842,    0,  841,  841,  842,
      846,  844,  846,  845,  843,  845,  846,  844,    0,  842,
      843,  845,    0,  846,  844,  842,  844,  843,  845,    0,
        0,    0,  842,    0,    0,    0,  842,  846,  844,  846,
      845,  847,  845,  846,  844,    0,    0,  847,  845,    0,
      846,  844,    0,  844,  847,  845,  848,  849,  848,  849,
      850,    0,  848,  849,    0,  851,  850,    0,  847,  848,

      849,  851,    0,  850,  847,  851,    0,    0,  851,    0,
        0,  847,    0,  848,  849,  848,  849,  850,  852,  848,
      849,    0,  851,  850,  852,    0,  848,  849,  851,    0,
      850,  852,  851,    0,  852,  851,  854,  855,  853,    0,
      853,  919,  854,  855,    0,  852,  853,  919,    0,  854,
      855,  852,    0,  853,  919,  855,    0,    0,  852,    0,
        0,  852,    0,  854,  855,  853,  921,  853,  919,  854,
      855,    0,  921,  853,  919,    0,  854,  855,  922,  921,
      853,  919,  855,  920,  922,  920,    0,    0,  923,  920,
        0,  922,    0,  921,  923,    0,  920,    0,    0,  921,

        0,  923,    0,    0,    0,  922,  921,    0,    0,    0,
      920,  922,  920,  924,  925,  923,  920,    0,  922,  924,
      925,  923,    0,  920,  924,  925,  924,  925,  923,  926,
      927,  926,  927,    0,    0,  926,  927,    0,    0,    0,
      924,  925,  926,  927,    0,    0,  924,  925,    0,    0,
        0,  924,  925,  924,  925,  928,  926,  927,  926,  927,
      929,  928,  926,  927,    0,  930,  929,    0,  928,  926,
      927,  930,    0,  929,    0,  931,    0,  931,  930,    0,
        0,    0,  928,  931,    0,    0,    0,  929,  928,    0,
      931,    0,  930,  929,    0,  928,    0,    0,  930,    0,

      929,  932,  931,  933,  931,  930,  934,  932,    0,  933,
      931,    0,  934,    0,  932,    0,  933,  931,  935,  934,
      933,    0,  934,    0,  935,    0,    0,    0,  932,    0,
      933,  935,    0,  934,  932,  935,  933,    0,    0,  934,
      936,  932,  936,  933,  936,  935,  934,  933,  936,  934,
      937,  935,    0,  938,    0,  936,  937,    0,  935,  938,
        0,    0,  935,  937,    0,    0,  938,  936,  939,  936,
        0,  936,  940,    0,  939,  936,    0,  937,  940,    0,
      938,  939,  936,  937,    0,  940,  938,    0,    0,    0,
      937,  941,    0,  938,  942,  939,  943,  941,    0,  940,

      942,  939,  943,    0,  941,  940,    0,  942,  939,  943,
        0,    0,  940,  944,    0,    0,    0,    0,  941,  944,
        0,  942,  945,  943,  941,    0,  944,  942,  945,  943,
        0,  941,  946,  945,  942,  945,  943,    0,  946,    0,
      944,  947,    0,  946,  948,  946,  944,  947,    0,  945,
      948,    0,    0,  944,  947,  945,    0,  948,    0,  946,
      945,  949,  945,  949,    0,  946,    0,    0,  947,  949,
      946,  948,  946,    0,  947,    0,  949,  948,    0,  950,
      950,  947,    0,    0,  948,  950,    0,  952,  949,  951,
      949,    0,  950,  952,    0,  951,  949,    0,  951,    0,

      952,    0,  951,  949,  953,  953,  950,  950,    0,    0,
      953,    0,  950,    0,  952,  954,  951,  953,    0,  950,
      952,  954,  951,    0,    0,  951,    0,  952,  954,  951,
      954,  953,  953,  955,  956,  955,    0,  953,    0,  955,
      956,    0,  954,  957,  953,  958,  955,  956,  954,  957,
        0,  958,  957,    0,  958,  954,  957,  954,  958,    0,
      955,  956,  955,    0,    0,    0,  955,  956,    0,  959,
      957,  960,  958,  955,  956,  959,  957,  960,  958,  957,
        0,  958,  959,  957,  960,  958,  961,  962,    0,    0,
        0,    0,  961,  962,    0,    0,  959,    0,  960,  961,

      962,    0,  959,    0,  960,    0,    0,    0,  961,  959,
      963,  960,  964,  961,  962,    0,  963,    0,  964,  961,
      962,  963,    0,  963,    0,  964,  961,  962,  965,    0,
        0,    0,    0,    0,  965,  961,    0,  963,  966,  964,
      966,  965,    0,  963,  966,  964,    0,  967,  963,  965,
      963,  966,  964,  967,    0,  965,  968,  969,  968,    0,
      967,  965,  968,  969,    0,  966,  970,  966,  965,  968,
      969,  966,  970,    0,  967,  971,  965,    0,  966,  970,
      967,  971,    0,  968,  969,  968,    0,  967,  971,  968,
      969,    0,  972,  970,  974,    0,  968,  969,  972,  970,

      974,  973,  971,  973,    0,  972,  970,  974,  971,  973,
        0,  975,    0,    0,    0,  971,  973,  975,    0,  972,
        0,  974,    0,    0,  975,  972,  975,  974,  973,  976,
      973,    0,  972,  977,  974,  976,  973,    0,  975,  977,
        0,  978,  976,  973,  975,    0,  977,  978,    0,    0,
        0,  975,  979,  975,  978,    0,  976,    0,  979,    0,
      977,    0,  976,    0,    0,  979,  977,    0,  978,  976,
      981,  980,    0,  977,  978,    0,  981,  980,    0,  979,
      980,  978, 1021,  981,  980,  979,    0,  981, 1021,    0,
        0,    0,  979, 1022,    0, 1021,    0,  981,  980, 1022,

        0,    0,    0,  981,  980,    0, 1022,  980, 1022, 1021,
      981,  980, 1023,    0,  981, 1021,    0, 1024, 1023,    0,
     1022, 1025, 1021, 1024,    0, 1023, 1022, 1025,    0,    0,
     1024,    0,    0, 1022, 1025, 1022, 1026,    0,    0, 1023,
        0,    0, 1026,    0, 1024, 1023,    0, 1027, 1025, 1026,
     1024,    0, 1023, 1027, 1025,    0,    0, 1024,    0, 1028,
     1027, 1025,    0, 1026, 1027, 1028,    0,    0,    0, 1026,
        0, 1029, 1028,    0, 1027, 1031, 1026, 1029,    0,    0,
     1027, 1031,    0, 1030, 1029, 1030, 1028, 1027, 1031, 1030,
        0, 1027, 1028, 1032, 1032, 1029, 1030,    0, 1029, 1028,

     1032,    0, 1031,    0, 1029,    0,    0, 1032, 1031,    0,
     1030, 1029, 1030, 1033, 1033, 1031, 1030,    0, 1034, 1033,
     1032, 1032,    0, 1030, 1034,    0, 1033, 1032,    0,    0,
     1035, 1034,    0,    0, 1032, 1034, 1035,    0,    0,    0,
     1033, 1033, 1036, 1035,    0, 1034, 1033,    0, 1036, 1035,
        0, 1034,    0, 1033, 1037, 1036,    0, 1035, 1034,    0,
     1037,    0, 1034, 1035,    0, 1039, 1038, 1037,    0, 1036,
     1035, 1039, 1038,    0,    0, 1036, 1035,    0, 1039, 1038,
        0, 1037, 1036, 1038,    0,    0,    0, 1037,    0, 1041,
     1042, 1040, 1039, 1038, 1037, 1041, 1042, 1040, 1039, 1038,

     1040, 1043, 1041, 1042, 1040, 1039, 1038, 1043,    0,    0,
     1038,    0,    0, 1044, 1043,    0, 1041, 1042, 1040, 1044,
        0,    0, 1041, 1042, 1040,    0, 1044, 1040, 1043, 1041,
     1042, 1040, 1045,    0, 1043,    0, 1046, 1047, 1045,    0,
     1044, 1043, 1046, 1047,    0, 1045, 1044,    0, 1048, 1046,
     1047,    0,    0, 1044, 1048,    0, 1047,    0,    0, 1045,
     1049, 1048,    0, 1046, 1047, 1045, 1049,    0,    0, 1046,
     1047,    0, 1045, 1049,    0, 1048, 1046, 1047, 1050, 1051,
        0, 1048,    0, 1047, 1050, 1051,    0, 1049, 1048, 1053,
     1052, 1050, 1051, 1049,    0, 1053, 1052, 1053,    0,    0,

     1049,    0, 1053, 1052,    0, 1050, 1051, 1052,    0,    0,
        0, 1050, 1051,    0, 1054, 1056, 1053, 1052, 1050, 1051,
     1054, 1056, 1053, 1052, 1053, 1054,    0, 1054, 1056, 1053,
     1052, 1055, 1056,    0, 1052,    0,    0, 1055,    0,    0,
        0, 1054, 1056, 1057, 1055,    0, 1055, 1054, 1056, 1057,
        0,    0, 1054,    0, 1054, 1056, 1057,    0, 1055, 1056,
        0, 1058, 1059,    0, 1055,    0, 1080, 1058, 1059,    0,
     1057, 1055, 1080, 1055, 1058, 1059, 1057,    0, 1079, 1080,
     1079,    0,    0, 1057, 1079,    0,    0,    0, 1058, 1059,
        0, 1079,    0, 1080, 1058, 1059,    0, 1081,    0, 1080,

        0, 1058, 1059, 1081,    0, 1079, 1080, 1079, 1081,    0,
     1081, 1079,    0, 1083, 1082, 1082, 1084,    0, 1079, 1083,
     1082,    0, 1084,    0, 1081, 1084, 1083, 1082,    0, 1084,
     1081, 1082, 1085,    0,    0, 1081,    0, 1081, 1085,    0,
     1083, 1082, 1082, 1084, 1086, 1085, 1083, 1082,    0, 1084,
     1086,    0, 1084, 1083, 1082,    0, 1084, 1086, 1082, 1085,
     1087, 1088, 1087, 1088,    0, 1085, 1087, 1088,    0, 1089,
        0, 1086, 1085, 1087, 1088, 1089,    0, 1086,    0,    0,
        0,    0, 1089,    0, 1086,    0, 1090, 1087, 1088, 1087,
     1088, 1089, 1090, 1087, 1088,    0, 1089,    0,    0, 1090,

     1087, 1088, 1089, 1090, 1091,    0, 1091,    0,    0, 1089,
     1091,    0,    0, 1090, 1092, 1093, 1092, 1091, 1089, 1090,
     1092, 1093,    0, 1094,    0,    0, 1090, 1092, 1093, 1094,
     1090, 1091, 1095, 1091,    0,    0, 1094, 1091, 1095,    0,
     1096, 1092, 1093, 1092, 1091, 1095, 1096, 1092, 1093, 1095,
     1094, 1097,    0, 1096, 1092, 1093, 1094, 1097,    0, 1095,
        0,    0, 1096, 1094, 1097, 1095,    0, 1096, 1113, 1112,
        0,    0, 1095, 1096, 1113, 1112, 1095,    0, 1097, 1112,
     1096, 1113, 1112,    0, 1097, 1113,    0, 1115,    0, 1096,
     1114, 1097, 1114, 1115,    0, 1113, 1112, 1116, 1114, 1116,

     1115, 1113, 1112, 1116,    0, 1114, 1112,    0, 1113, 1112,
     1116,    0, 1113,    0, 1115, 1117, 1118, 1114,    0, 1114,
     1115, 1117, 1118,    0, 1116, 1114, 1116, 1115, 1117, 1118,
     1116,    0, 1114, 1119, 1120,    0,    0, 1116, 1121, 1119,
     1120,    0, 1117, 1118, 1121,    0, 1119, 1120, 1117, 1118,
        0, 1121,    0,    0,    0, 1117, 1118,    0,    0,    0,
     1119, 1120, 1123, 1122, 1124, 1121, 1119, 1120, 1123, 1122,
     1124, 1121,    0, 1119, 1120, 1123, 1122, 1124, 1121, 1122,
     1125, 1133,    0, 1133,    0,    0, 1125, 1133,    0, 1123,
     1122, 1124, 1125, 1125, 1133, 1123, 1122, 1124,    0, 1134,

        0,    0, 1123, 1122, 1124, 1134, 1122, 1125, 1133,    0,
     1133, 1135, 1134, 1125, 1133,    0,    0, 1135,    0, 1125,
     1125, 1133,    0, 1136, 1135,    0, 1134,    0, 1135, 1136,
        0,    0, 1134, 1136, 1137, 1138, 1136,    0, 1135, 1134,
     1137, 1138,    0,    0, 1135,    0, 1139, 1137, 1138,    0,
     1136, 1135, 1139,    0,    0, 1135, 1136, 1139, 1144, 1139,
     1136, 1137, 1138, 1136, 1144,    0,    0, 1137, 1138, 1144,
     1145, 1144, 1145, 1139, 1137, 1138, 1145,    0,    0, 1139,
        0,    0, 1147, 1145, 1139, 1144, 1139, 1146, 1147, 1146,
        0, 1144,    0, 1146,    0, 1147, 1144, 1145, 1144, 1145,

     1146,    0,    0, 1145,    0, 1152, 1151,    0,    0, 1147,
     1145, 1152, 1151,    0, 1146, 1147, 1146,    0, 1152, 1151,
     1146,    0, 1147, 1151, 1153,    0,    0, 1146, 1155,    0,
     1153,    0, 1152, 1151, 1155,    0,    0, 1153, 1152, 1151,
        0, 1155,    0,    0,    0, 1152, 1151,    0,    0,    0,
     1151, 1153,    0,    0,    0, 1155,    0, 1153,    0,    0,
        0, 1155,    0,    0, 1153,    0,    0,    0, 1155, 1157,
     1157, 1157, 1157, 1157, 1157, 1158,    0,    0, 1158, 1158,
     1158, 1159, 1159, 1159, 1159, 1159, 1159, 1160, 1160, 1161,
        0, 1161, 1161, 1161, 1161, 1162,    0, 1162, 1162, 1162,

     1162, 1163, 1163, 1163, 1163, 1163, 1163, 1164, 1164, 1165,
        0, 1165, 1165, 1165, 1165, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }
#define FALLBACK_ID {\
	if (fallback) {\
		yylval->sval = strdup(yytext);\
		return SQL_IDENTIFIER;\
	}\
}
#define FALLBACK_BEGIN { fallback = true; }
#define FALLBACK_END { fallback = false; }

static thread_local std::stringstream strbuf;

bool fallback = false;

#line 2518 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2532 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 67 "flex_lexer.l"


#line 2819 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1157 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1156 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 71 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 73 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(AUTOINCREMENT)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(CURRENT_DATE)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(CURRENT_TIME)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CONSTRAINT)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(DEFERRABLE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(REFERENCES)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXCLUSIVE)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(IMMEDIATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(INITIALLY)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(RECURSIVE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SAVEPOINT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
FALLBACK_ID TOKEN(CONFLICT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
FALLBACK_ID TOKEN(DATABASE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
FALLBACK_ID TOKEN(DEFERRED)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
FALLBACK_ID TOKEN(ANALYZE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
FALLBACK_ID TOKEN(CASCADE)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(COLLATE)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(FOREIGN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(INDEXED)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(INSTEAD)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(NOTNULL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(REINDEX)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(RELEASE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(REPLACE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(TRIGGER)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(WITHOUT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
FALLBACK_ID TOKEN(ACTION)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
FALLBACK_ID TOKEN(ATTACH)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
FALLBACK_ID TOKEN(BEFORE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
FALLBACK_END TOKEN(CREATE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
FALLBACK_ID TOKEN(DETACH)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
FALLBACK_ID TOKEN(IGNORE)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
FALLBACK_BEGIN TOKEN(INSERT)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
FALLBACK_ID TOKEN(OFFSET)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
FALLBACK_ID TOKEN(PRAGMA)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(REGEXP)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
FALLBACK_BEGIN TOKEN(SELECT)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(VACUUM)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
FALLBACK_END TOKEN(VALUES)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
FALLBACK_ID TOKEN(ABORT)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
FALLBACK_ID TOKEN(AFTER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
FALLBACK_END TOKEN(ALTER)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
FALLBACK_ID TOKEN(BEGIN)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CHECK)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(MATCH)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
FALLBACK_ID TOKEN(QUERY)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(RAISE)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(BLOB)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
FALLBACK_ID TOKEN(DESC)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(EACH)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(FAIL)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
FALLBACK_END TOKEN(FROM)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(GLOB)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(TEMP)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
FALLBACK_ID TOKEN(ASC)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
FALLBACK_ID TOKEN(FOR)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
FALLBACK_ID TOKEN(KEY)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(ROW)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
FALLBACK_ID TOKEN(BY)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 143:
#line 217 "flex_lexer.l"
case 144:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 238 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 244 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 2, strlen(yytext)-1);
	return SQL_BINARY;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 250 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 253 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3648 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(singlequotedstring):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1157 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1157 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1156);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 253 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

